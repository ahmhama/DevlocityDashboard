{"ast":null,"code":"import Metadata from '../metadata.js';\nimport { VALID_DIGITS } from '../constants.js';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}","map":{"version":3,"sources":["../../source/helpers/stripIddPrefix.js"],"names":["CAPTURING_DIGIT_PATTERN","countryMetadata","IDDPrefixPattern","number","matchedGroups"],"mappings":"AAAA,OAAA,QAAA,MAAA,gBAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AAEA,IAAMA,uBAAuB,GAAG,IAAA,MAAA,CAAW,OAAA,YAAA,GAA3C,IAAgC,CAAhC;AAEA,eAAe,SAAA,cAAA,CAAA,MAAA,EAAA,OAAA,EAAA,WAAA,EAAA,QAAA,EAAgE;EAC9E,IAAI,CAAJ,OAAA,EAAc;IACb;EAF6E,CAAA,CAI9E;;;EACA,IAAMC,eAAe,GAAG,IAAA,QAAA,CAAxB,QAAwB,CAAxB;EACAA,eAAe,CAAfA,mBAAAA,CAAAA,OAAAA,EAAAA,WAAAA;EACA,IAAMC,gBAAgB,GAAG,IAAA,MAAA,CAAWD,eAAe,CAAnD,SAAoCA,EAAX,CAAzB;;EACA,IAAIE,MAAM,CAANA,MAAAA,CAAAA,gBAAAA,MAAJ,CAAA,EAA2C;IAC1C;EAT6E,CAAA,CAW9E;;;EACAA,MAAM,GAAGA,MAAM,CAANA,KAAAA,CAAaA,MAAM,CAANA,KAAAA,CAAAA,gBAAAA,EAAAA,CAAAA,EAZwD,MAYrEA,CAATA,CAZ8E,CAa9E;EACA;EACA;EACA;;EACA,IAAMC,aAAa,GAAGD,MAAM,CAANA,KAAAA,CAAtB,uBAAsBA,CAAtB;;EACA,IAAIC,aAAa,IAAIA,aAAa,CAAbA,CAAa,CAAbA,IAAjBA,IAAAA,IAA6CA,aAAa,CAAbA,CAAa,CAAbA,CAAAA,MAAAA,GAAjD,CAAA,EAA8E;IAC7E,IAAIA,aAAa,CAAbA,CAAa,CAAbA,KAAJ,GAAA,EAA8B;MAC7B;IACA;EACD;;EACD,OAAA,MAAA;AACA","sourcesContent":["import Metadata from '../metadata.js'\r\nimport { VALID_DIGITS } from '../constants.js'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\t// Check if the number is IDD-prefixed.\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\t// If there're any digits after an IDD prefix,\r\n\t// then those digits are a country calling code.\r\n\t// Since no country code starts with a `0`,\r\n\t// the code below validates that the next digit (if present) is not `0`.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\r\n\t\tif (matchedGroups[1] === '0') {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}"]},"metadata":{},"sourceType":"module"}