{"ast":null,"code":"'use strict';\n\nconst req = require('import-cwd');\n/**\n * Plugin Loader\n *\n * @private\n * @method load\n *\n * @param  {String} plugin PostCSS Plugin Name\n * @param  {Object} options PostCSS Plugin Options\n *\n * @return {Function} PostCSS Plugin\n */\n\n\nconst load = (plugin, options, file) => {\n  try {\n    if (options === null || options === undefined || Object.keys(options).length === 0) {\n      return req(plugin);\n    } else {\n      return req(plugin)(options);\n    }\n  } catch (err) {\n    throw new Error(`Loading PostCSS Plugin failed: ${err.message}\\n\\n(@${file})`);\n  }\n};\n/**\n * Load Plugins\n *\n * @private\n * @method plugins\n *\n * @param {Object} config PostCSS Config Plugins\n *\n * @return {Array} plugins PostCSS Plugins\n */\n\n\nconst plugins = (config, file) => {\n  let plugins = [];\n\n  if (Array.isArray(config.plugins)) {\n    plugins = config.plugins.filter(Boolean);\n  } else {\n    plugins = Object.keys(config.plugins).filter(plugin => {\n      return config.plugins[plugin] !== false ? plugin : '';\n    }).map(plugin => {\n      return load(plugin, config.plugins[plugin], file);\n    });\n  }\n\n  if (plugins.length && plugins.length > 0) {\n    plugins.forEach((plugin, i) => {\n      if (plugin.default) {\n        plugin = plugin.default;\n      }\n\n      if (plugin.postcss === true) {\n        plugin = plugin();\n      } else if (plugin.postcss) {\n        plugin = plugin.postcss;\n      }\n\n      if ( // eslint-disable-next-line\n      !(typeof plugin === 'object' && Array.isArray(plugin.plugins) || typeof plugin === 'object' && plugin.postcssPlugin || typeof plugin === 'function')) {\n        throw new TypeError(`Invalid PostCSS Plugin found at: plugins[${i}]\\n\\n(@${file})`);\n      }\n    });\n  }\n\n  return plugins;\n};\n\nmodule.exports = plugins;","map":{"version":3,"names":["req","require","load","plugin","options","file","undefined","Object","keys","length","err","Error","message","plugins","config","Array","isArray","filter","Boolean","map","forEach","i","default","postcss","postcssPlugin","TypeError","module","exports"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/postcss-load-config/src/plugins.js"],"sourcesContent":["'use strict'\n\nconst req = require('import-cwd')\n\n/**\n * Plugin Loader\n *\n * @private\n * @method load\n *\n * @param  {String} plugin PostCSS Plugin Name\n * @param  {Object} options PostCSS Plugin Options\n *\n * @return {Function} PostCSS Plugin\n */\nconst load = (plugin, options, file) => {\n  try {\n    if (\n      options === null ||\n      options === undefined ||\n      Object.keys(options).length === 0\n    ) {\n      return req(plugin)\n    } else {\n      return req(plugin)(options)\n    }\n  } catch (err) {\n    throw new Error(`Loading PostCSS Plugin failed: ${err.message}\\n\\n(@${file})`)\n  }\n}\n\n/**\n * Load Plugins\n *\n * @private\n * @method plugins\n *\n * @param {Object} config PostCSS Config Plugins\n *\n * @return {Array} plugins PostCSS Plugins\n */\nconst plugins = (config, file) => {\n  let plugins = []\n\n  if (Array.isArray(config.plugins)) {\n    plugins = config.plugins.filter(Boolean)\n  } else {\n    plugins = Object.keys(config.plugins)\n      .filter((plugin) => {\n        return config.plugins[plugin] !== false ? plugin : ''\n      })\n      .map((plugin) => {\n        return load(plugin, config.plugins[plugin], file)\n      })\n  }\n\n  if (plugins.length && plugins.length > 0) {\n    plugins.forEach((plugin, i) => {\n      if (plugin.default) {\n        plugin = plugin.default\n      }\n\n      if (plugin.postcss === true) {\n        plugin = plugin()\n      } else if (plugin.postcss) {\n        plugin = plugin.postcss\n      }\n\n      if (\n        // eslint-disable-next-line\n        !(\n          (typeof plugin === 'object' && Array.isArray(plugin.plugins)) ||\n          (typeof plugin === 'object' && plugin.postcssPlugin) ||\n          (typeof plugin === 'function')\n        )\n      ) {\n        throw new TypeError(`Invalid PostCSS Plugin found at: plugins[${i}]\\n\\n(@${file})`)\n      }\n    })\n  }\n\n  return plugins\n}\n\nmodule.exports = plugins\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAG,CAACC,MAAD,EAASC,OAAT,EAAkBC,IAAlB,KAA2B;EACtC,IAAI;IACF,IACED,OAAO,KAAK,IAAZ,IACAA,OAAO,KAAKE,SADZ,IAEAC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,MAArB,KAAgC,CAHlC,EAIE;MACA,OAAOT,GAAG,CAACG,MAAD,CAAV;IACD,CAND,MAMO;MACL,OAAOH,GAAG,CAACG,MAAD,CAAH,CAAYC,OAAZ,CAAP;IACD;EACF,CAVD,CAUE,OAAOM,GAAP,EAAY;IACZ,MAAM,IAAIC,KAAJ,CAAW,kCAAiCD,GAAG,CAACE,OAAQ,SAAQP,IAAK,GAArE,CAAN;EACD;AACF,CAdD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMQ,OAAO,GAAG,CAACC,MAAD,EAAST,IAAT,KAAkB;EAChC,IAAIQ,OAAO,GAAG,EAAd;;EAEA,IAAIE,KAAK,CAACC,OAAN,CAAcF,MAAM,CAACD,OAArB,CAAJ,EAAmC;IACjCA,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeI,MAAf,CAAsBC,OAAtB,CAAV;EACD,CAFD,MAEO;IACLL,OAAO,GAAGN,MAAM,CAACC,IAAP,CAAYM,MAAM,CAACD,OAAnB,EACPI,MADO,CACCd,MAAD,IAAY;MAClB,OAAOW,MAAM,CAACD,OAAP,CAAeV,MAAf,MAA2B,KAA3B,GAAmCA,MAAnC,GAA4C,EAAnD;IACD,CAHO,EAIPgB,GAJO,CAIFhB,MAAD,IAAY;MACf,OAAOD,IAAI,CAACC,MAAD,EAASW,MAAM,CAACD,OAAP,CAAeV,MAAf,CAAT,EAAiCE,IAAjC,CAAX;IACD,CANO,CAAV;EAOD;;EAED,IAAIQ,OAAO,CAACJ,MAAR,IAAkBI,OAAO,CAACJ,MAAR,GAAiB,CAAvC,EAA0C;IACxCI,OAAO,CAACO,OAAR,CAAgB,CAACjB,MAAD,EAASkB,CAAT,KAAe;MAC7B,IAAIlB,MAAM,CAACmB,OAAX,EAAoB;QAClBnB,MAAM,GAAGA,MAAM,CAACmB,OAAhB;MACD;;MAED,IAAInB,MAAM,CAACoB,OAAP,KAAmB,IAAvB,EAA6B;QAC3BpB,MAAM,GAAGA,MAAM,EAAf;MACD,CAFD,MAEO,IAAIA,MAAM,CAACoB,OAAX,EAAoB;QACzBpB,MAAM,GAAGA,MAAM,CAACoB,OAAhB;MACD;;MAED,KACE;MACA,EACG,OAAOpB,MAAP,KAAkB,QAAlB,IAA8BY,KAAK,CAACC,OAAN,CAAcb,MAAM,CAACU,OAArB,CAA/B,IACC,OAAOV,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACqB,aADtC,IAEC,OAAOrB,MAAP,KAAkB,UAHrB,CAFF,EAOE;QACA,MAAM,IAAIsB,SAAJ,CAAe,4CAA2CJ,CAAE,UAAShB,IAAK,GAA1E,CAAN;MACD;IACF,CArBD;EAsBD;;EAED,OAAOQ,OAAP;AACD,CAzCD;;AA2CAa,MAAM,CAACC,OAAP,GAAiBd,OAAjB"},"metadata":{},"sourceType":"script"}