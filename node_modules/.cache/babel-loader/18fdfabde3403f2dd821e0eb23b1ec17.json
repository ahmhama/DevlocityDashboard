{"ast":null,"code":"import { now } from '../../shared/utils.js';\nexport default function freeMode(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    once\n  } = _ref;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n\n  function onTouchMove() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n\n  function onTouchEnd(_ref2) {\n    let {\n      currentPos\n    } = _ref2;\n    const {\n      params,\n      $wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper; // Time diff\n\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}","map":{"version":3,"names":["now","freeMode","swiper","extendParams","emit","once","enabled","momentum","momentumRatio","momentumBounce","momentumBounceRatio","momentumVelocityRatio","sticky","minimumVelocity","onTouchMove","touchEventsData","data","touches","velocities","length","push","position","isHorizontal","time","touchStartTime","onTouchEnd","currentPos","params","$wrapperEl","rtlTranslate","rtl","snapGrid","touchEndTime","timeDiff","minTranslate","slideTo","activeIndex","maxTranslate","slides","lastMoveEvent","pop","velocityEvent","distance","velocity","Math","abs","momentumDuration","momentumDistance","newPosition","translate","doBounce","afterBouncePosition","bounceAmount","needsLoopFix","allowMomentumBounce","loop","centeredSlides","nextSlide","j","swipeDirection","loopFix","moveDistance","currentSlideSize","slidesSizesGrid","speed","slideToClosest","updateProgress","setTransition","setTranslate","transitionStart","animating","transitionEnd","destroyed","setTimeout","updateActiveIndex","updateSlidesClasses","longSwipesMs","Object","assign"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/swiper/modules/free-mode/free-mode.js"],"sourcesContent":["import { now } from '../../shared/utils.js';\nexport default function freeMode({\n  swiper,\n  extendParams,\n  emit,\n  once\n}) {\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n\n  function onTouchMove() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n\n  function onTouchEnd({\n    currentPos\n  }) {\n    const {\n      params,\n      $wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper; // Time diff\n\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}