{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(possibleCountries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // Leading digits check would be the simplest and fastest one.\n    // Leading digits patterns are only defined for about 20% of all countries.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // Matching \"leading digits\" is a sufficient but not necessary condition.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}","map":{"version":3,"sources":["../../source/helpers/getCountryByCallingCode.js"],"names":["USE_NON_GEOGRAPHIC_COUNTRY_CODE","metadata","possibleCountries","selectCountryFromList","country","nationalPhoneNumber","getNumberType","phone"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,QAAA,MAAA,gBAAA;AACA,OAAA,aAAA,MAAA,oBAAA;AAEA,IAAMA,+BAA+B,GAArC,KAAA;AAEA,eAAe,SAAA,uBAAA,CAAA,WAAA,EAAA,mBAAA,EAAA,QAAA,EAA6E;EAC3F;EACA,IAAA,+BAAA,EAAqC;IACpC,IAAIC,QAAQ,CAARA,0BAAAA,CAAJ,WAAIA,CAAJ,EAAsD;MACrD,OAAA,KAAA;IACA;EALyF,CAAA,CAO3F;;;EACA,IAAMC,iBAAiB,GAAGD,QAAQ,CAARA,6BAAAA,CAA1B,WAA0BA,CAA1B;;EACA,IAAI,CAAJ,iBAAA,EAAwB;IACvB;EAV0F,CAAA,CAY3F;EACA;;;EACA,IAAIC,iBAAiB,CAAjBA,MAAAA,KAAJ,CAAA,EAAoC;IACnC,OAAOA,iBAAiB,CAAxB,CAAwB,CAAxB;EACA;;EACD,OAAOC,qBAAqB,CAAA,iBAAA,EAAA,mBAAA,EAAyCF,QAAQ,CAA7E,QAA4B,CAA5B;AACA;;AAED,SAAA,qBAAA,CAAA,iBAAA,EAAA,mBAAA,EAAA,QAAA,EAAiF;EAChF;EACAA,QAAQ,GAAG,IAAA,QAAA,CAAXA,QAAW,CAAXA;;EACA,KAAA,IAAA,SAAA,GAAA,+BAAA,CAAA,iBAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,GAAyC;IAAA,IAA9BG,OAA8B,GAAA,KAAA,CAAA,KAAA;IACxCH,QAAQ,CAARA,OAAAA,CADwC,OACxCA,EADwC,CAExC;IACA;IACA;IACA;;IACA,IAAIA,QAAQ,CAAZ,aAAIA,EAAJ,EAA8B;MAC7B,IAAII,mBAAmB,IACtBA,mBAAmB,CAAnBA,MAAAA,CAA2BJ,QAAQ,CAAnCI,aAA2BJ,EAA3BI,MADD,CAAA,EAC6D;QAC5D,OAAA,OAAA;MACA;IAJF,CAAA,CAMA;IACA;IAPA,KAQK,IAAIC,aAAa,CAAC;MAAEC,KAAK,EAAP,mBAAA;MAA8BH,OAAO,EAAPA;IAA9B,CAAD,EAAA,SAAA,EAAqDH,QAAQ,CAA9E,QAAiB,CAAjB,EAA0F;MAC9F,OAAA,OAAA;IACA;EACD;AACD","sourcesContent":["import Metadata from '../metadata.js'\r\nimport getNumberType from './getNumberType.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\t// Is always non-empty, because `callingCode` is always valid\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}\r\n\r\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// Leading digits check would be the simplest and fastest one.\r\n\t\t// Leading digits patterns are only defined for about 20% of all countries.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t\t// Matching \"leading digits\" is a sufficient but not necessary condition.\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}