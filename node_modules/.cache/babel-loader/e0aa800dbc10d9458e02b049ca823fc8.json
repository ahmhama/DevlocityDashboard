{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _declaration = _interopRequireDefault(require(\"./declaration\"));\n\nvar _tokenize = _interopRequireDefault(require(\"./tokenize\"));\n\nvar _comment = _interopRequireDefault(require(\"./comment\"));\n\nvar _atRule = _interopRequireDefault(require(\"./at-rule\"));\n\nvar _root = _interopRequireDefault(require(\"./root\"));\n\nvar _rule = _interopRequireDefault(require(\"./rule\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(input) {\n    this.input = input;\n    this.root = new _root.default();\n    this.current = this.root;\n    this.spaces = '';\n    this.semicolon = false;\n    this.createTokenizer();\n    this.root.source = {\n      input: input,\n      start: {\n        line: 1,\n        column: 1\n      }\n    };\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto.createTokenizer = function createTokenizer() {\n    this.tokenizer = (0, _tokenize.default)(this.input);\n  };\n\n  _proto.parse = function parse() {\n    var token;\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken();\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1];\n          break;\n\n        case ';':\n          this.freeSemicolon(token);\n          break;\n\n        case '}':\n          this.end(token);\n          break;\n\n        case 'comment':\n          this.comment(token);\n          break;\n\n        case 'at-word':\n          this.atrule(token);\n          break;\n\n        case '{':\n          this.emptyRule(token);\n          break;\n\n        default:\n          this.other(token);\n          break;\n      }\n    }\n\n    this.endFile();\n  };\n\n  _proto.comment = function comment(token) {\n    var node = new _comment.default();\n    this.init(node, token[2], token[3]);\n    node.source.end = {\n      line: token[4],\n      column: token[5]\n    };\n    var text = token[1].slice(2, -2);\n\n    if (/^\\s*$/.test(text)) {\n      node.text = '';\n      node.raws.left = text;\n      node.raws.right = '';\n    } else {\n      var match = text.match(/^(\\s*)([^]*[^\\s])(\\s*)$/);\n      node.text = match[2];\n      node.raws.left = match[1];\n      node.raws.right = match[3];\n    }\n  };\n\n  _proto.emptyRule = function emptyRule(token) {\n    var node = new _rule.default();\n    this.init(node, token[2], token[3]);\n    node.selector = '';\n    node.raws.between = '';\n    this.current = node;\n  };\n\n  _proto.other = function other(start) {\n    var end = false;\n    var type = null;\n    var colon = false;\n    var bracket = null;\n    var brackets = [];\n    var tokens = [];\n    var token = start;\n\n    while (token) {\n      type = token[0];\n      tokens.push(token);\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token;\n        brackets.push(type === '(' ? ')' : ']');\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens);\n            return;\n          } else {\n            break;\n          }\n        } else if (type === '{') {\n          this.rule(tokens);\n          return;\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop());\n          end = true;\n          break;\n        } else if (type === ':') {\n          colon = true;\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop();\n        if (brackets.length === 0) bracket = null;\n      }\n\n      token = this.tokenizer.nextToken();\n    }\n\n    if (this.tokenizer.endOfFile()) end = true;\n    if (brackets.length > 0) this.unclosedBracket(bracket);\n\n    if (end && colon) {\n      while (tokens.length) {\n        token = tokens[tokens.length - 1][0];\n        if (token !== 'space' && token !== 'comment') break;\n        this.tokenizer.back(tokens.pop());\n      }\n\n      this.decl(tokens);\n    } else {\n      this.unknownWord(tokens);\n    }\n  };\n\n  _proto.rule = function rule(tokens) {\n    tokens.pop();\n    var node = new _rule.default();\n    this.init(node, tokens[0][2], tokens[0][3]);\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens);\n    this.raw(node, 'selector', tokens);\n    this.current = node;\n  };\n\n  _proto.decl = function decl(tokens) {\n    var node = new _declaration.default();\n    this.init(node);\n    var last = tokens[tokens.length - 1];\n\n    if (last[0] === ';') {\n      this.semicolon = true;\n      tokens.pop();\n    }\n\n    if (last[4]) {\n      node.source.end = {\n        line: last[4],\n        column: last[5]\n      };\n    } else {\n      node.source.end = {\n        line: last[2],\n        column: last[3]\n      };\n    }\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens);\n      node.raws.before += tokens.shift()[1];\n    }\n\n    node.source.start = {\n      line: tokens[0][2],\n      column: tokens[0][3]\n    };\n    node.prop = '';\n\n    while (tokens.length) {\n      var type = tokens[0][0];\n\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break;\n      }\n\n      node.prop += tokens.shift()[1];\n    }\n\n    node.raws.between = '';\n    var token;\n\n    while (tokens.length) {\n      token = tokens.shift();\n\n      if (token[0] === ':') {\n        node.raws.between += token[1];\n        break;\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token]);\n        }\n\n        node.raws.between += token[1];\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0];\n      node.prop = node.prop.slice(1);\n    }\n\n    node.raws.between += this.spacesAndCommentsFromStart(tokens);\n    this.precheckMissedSemicolon(tokens);\n\n    for (var i = tokens.length - 1; i > 0; i--) {\n      token = tokens[i];\n\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true;\n        var string = this.stringFrom(tokens, i);\n        string = this.spacesFromEnd(tokens) + string;\n        if (string !== ' !important') node.raws.important = string;\n        break;\n      } else if (token[1].toLowerCase() === 'important') {\n        var cache = tokens.slice(0);\n        var str = '';\n\n        for (var j = i; j > 0; j--) {\n          var _type = cache[j][0];\n\n          if (str.trim().indexOf('!') === 0 && _type !== 'space') {\n            break;\n          }\n\n          str = cache.pop()[1] + str;\n        }\n\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true;\n          node.raws.important = str;\n          tokens = cache;\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break;\n      }\n    }\n\n    this.raw(node, 'value', tokens);\n    if (node.value.indexOf(':') !== -1) this.checkMissedSemicolon(tokens);\n  };\n\n  _proto.atrule = function atrule(token) {\n    var node = new _atRule.default();\n    node.name = token[1].slice(1);\n\n    if (node.name === '') {\n      this.unnamedAtrule(node, token);\n    }\n\n    this.init(node, token[2], token[3]);\n    var prev;\n    var shift;\n    var last = false;\n    var open = false;\n    var params = [];\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken();\n\n      if (token[0] === ';') {\n        node.source.end = {\n          line: token[2],\n          column: token[3]\n        };\n        this.semicolon = true;\n        break;\n      } else if (token[0] === '{') {\n        open = true;\n        break;\n      } else if (token[0] === '}') {\n        if (params.length > 0) {\n          shift = params.length - 1;\n          prev = params[shift];\n\n          while (prev && prev[0] === 'space') {\n            prev = params[--shift];\n          }\n\n          if (prev) {\n            node.source.end = {\n              line: prev[4],\n              column: prev[5]\n            };\n          }\n        }\n\n        this.end(token);\n        break;\n      } else {\n        params.push(token);\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true;\n        break;\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params);\n\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params);\n      this.raw(node, 'params', params);\n\n      if (last) {\n        token = params[params.length - 1];\n        node.source.end = {\n          line: token[4],\n          column: token[5]\n        };\n        this.spaces = node.raws.between;\n        node.raws.between = '';\n      }\n    } else {\n      node.raws.afterName = '';\n      node.params = '';\n    }\n\n    if (open) {\n      node.nodes = [];\n      this.current = node;\n    }\n  };\n\n  _proto.end = function end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon;\n    }\n\n    this.semicolon = false;\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n    this.spaces = '';\n\n    if (this.current.parent) {\n      this.current.source.end = {\n        line: token[2],\n        column: token[3]\n      };\n      this.current = this.current.parent;\n    } else {\n      this.unexpectedClose(token);\n    }\n  };\n\n  _proto.endFile = function endFile() {\n    if (this.current.parent) this.unclosedBlock();\n\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon;\n    }\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n  };\n\n  _proto.freeSemicolon = function freeSemicolon(token) {\n    this.spaces += token[1];\n\n    if (this.current.nodes) {\n      var prev = this.current.nodes[this.current.nodes.length - 1];\n\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces;\n        this.spaces = '';\n      }\n    }\n  } // Helpers\n  ;\n\n  _proto.init = function init(node, line, column) {\n    this.current.push(node);\n    node.source = {\n      start: {\n        line: line,\n        column: column\n      },\n      input: this.input\n    };\n    node.raws.before = this.spaces;\n    this.spaces = '';\n    if (node.type !== 'comment') this.semicolon = false;\n  };\n\n  _proto.raw = function raw(node, prop, tokens) {\n    var token, type;\n    var length = tokens.length;\n    var value = '';\n    var clean = true;\n    var next, prev;\n    var pattern = /^([.|#])?([\\w])+/i;\n\n    for (var i = 0; i < length; i += 1) {\n      token = tokens[i];\n      type = token[0];\n\n      if (type === 'comment' && node.type === 'rule') {\n        prev = tokens[i - 1];\n        next = tokens[i + 1];\n\n        if (prev[0] !== 'space' && next[0] !== 'space' && pattern.test(prev[1]) && pattern.test(next[1])) {\n          value += token[1];\n        } else {\n          clean = false;\n        }\n\n        continue;\n      }\n\n      if (type === 'comment' || type === 'space' && i === length - 1) {\n        clean = false;\n      } else {\n        value += token[1];\n      }\n    }\n\n    if (!clean) {\n      var raw = tokens.reduce(function (all, i) {\n        return all + i[1];\n      }, '');\n      node.raws[prop] = {\n        value: value,\n        raw: raw\n      };\n    }\n\n    node[prop] = value;\n  };\n\n  _proto.spacesAndCommentsFromEnd = function spacesAndCommentsFromEnd(tokens) {\n    var lastTokenType;\n    var spaces = '';\n\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0];\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break;\n      spaces = tokens.pop()[1] + spaces;\n    }\n\n    return spaces;\n  };\n\n  _proto.spacesAndCommentsFromStart = function spacesAndCommentsFromStart(tokens) {\n    var next;\n    var spaces = '';\n\n    while (tokens.length) {\n      next = tokens[0][0];\n      if (next !== 'space' && next !== 'comment') break;\n      spaces += tokens.shift()[1];\n    }\n\n    return spaces;\n  };\n\n  _proto.spacesFromEnd = function spacesFromEnd(tokens) {\n    var lastTokenType;\n    var spaces = '';\n\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0];\n      if (lastTokenType !== 'space') break;\n      spaces = tokens.pop()[1] + spaces;\n    }\n\n    return spaces;\n  };\n\n  _proto.stringFrom = function stringFrom(tokens, from) {\n    var result = '';\n\n    for (var i = from; i < tokens.length; i++) {\n      result += tokens[i][1];\n    }\n\n    tokens.splice(from, tokens.length - from);\n    return result;\n  };\n\n  _proto.colon = function colon(tokens) {\n    var brackets = 0;\n    var token, type, prev;\n\n    for (var i = 0; i < tokens.length; i++) {\n      token = tokens[i];\n      type = token[0];\n\n      if (type === '(') {\n        brackets += 1;\n      }\n\n      if (type === ')') {\n        brackets -= 1;\n      }\n\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token);\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue;\n        } else {\n          return i;\n        }\n      }\n\n      prev = token;\n    }\n\n    return false;\n  } // Errors\n  ;\n\n  _proto.unclosedBracket = function unclosedBracket(bracket) {\n    throw this.input.error('Unclosed bracket', bracket[2], bracket[3]);\n  };\n\n  _proto.unknownWord = function unknownWord(tokens) {\n    throw this.input.error('Unknown word', tokens[0][2], tokens[0][3]);\n  };\n\n  _proto.unexpectedClose = function unexpectedClose(token) {\n    throw this.input.error('Unexpected }', token[2], token[3]);\n  };\n\n  _proto.unclosedBlock = function unclosedBlock() {\n    var pos = this.current.source.start;\n    throw this.input.error('Unclosed block', pos.line, pos.column);\n  };\n\n  _proto.doubleColon = function doubleColon(token) {\n    throw this.input.error('Double colon', token[2], token[3]);\n  };\n\n  _proto.unnamedAtrule = function unnamedAtrule(node, token) {\n    throw this.input.error('At-rule without name', token[2], token[3]);\n  };\n\n  _proto.precheckMissedSemicolon = function precheckMissedSemicolon()\n  /* tokens */\n  {// Hook for Safe Parser\n  };\n\n  _proto.checkMissedSemicolon = function checkMissedSemicolon(tokens) {\n    var colon = this.colon(tokens);\n    if (colon === false) return;\n    var founded = 0;\n    var token;\n\n    for (var j = colon - 1; j >= 0; j--) {\n      token = tokens[j];\n\n      if (token[0] !== 'space') {\n        founded += 1;\n        if (founded === 2) break;\n      }\n    }\n\n    throw this.input.error('Missed semicolon', token[2], token[3]);\n  };\n\n  return Parser;\n}();\n\nexports.default = Parser;\nmodule.exports = exports.default;","map":{"version":3,"sources":["parser.es6"],"names":["Parser","Root","input","start","line","column","createTokenizer","parse","token","comment","node","Comment","text","match","emptyRule","Rule","other","end","type","colon","bracket","brackets","tokens","rule","decl","Declaration","last","i","string","cache","str","j","atrule","AtRule","open","params","shift","prev","endFile","freeSemicolon","init","raw","length","value","clean","pattern","next","all","spacesAndCommentsFromEnd","spaces","lastTokenType","spacesAndCommentsFromStart","spacesFromEnd","stringFrom","result","unclosedBracket","unknownWord","unexpectedClose","unclosedBlock","pos","doubleColon","unnamedAtrule","precheckMissedSemicolon","checkMissedSemicolon","founded"],"mappings":"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","sourcesContent":["import Declaration from './declaration'\nimport tokenizer from './tokenize'\nimport Comment from './comment'\nimport AtRule from './at-rule'\nimport Root from './root'\nimport Rule from './rule'\n\nexport default class Parser {\n  constructor (input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { line: 1, column: 1 } }\n  }\n\n  createTokenizer () {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse () {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment (token) {\n    let node = new Comment()\n    this.init(node, token[2], token[3])\n    node.source.end = { line: token[4], column: token[5] }\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*[^\\s])(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule (token) {\n    let node = new Rule()\n    this.init(node, token[2], token[3])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other (start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      while (tokens.length) {\n        token = tokens[tokens.length - 1][0]\n        if (token !== 'space' && token !== 'comment') break\n        this.tokenizer.back(tokens.pop())\n      }\n      this.decl(tokens)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule (tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2], tokens[0][3])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl (tokens) {\n    let node = new Declaration()\n    this.init(node)\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n    if (last[4]) {\n      node.source.end = { line: last[4], column: last[5] }\n    } else {\n      node.source.end = { line: last[2], column: last[3] }\n    }\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = { line: tokens[0][2], column: tokens[0][3] }\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n    node.raws.between += this.spacesAndCommentsFromStart(tokens)\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i > 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    this.raw(node, 'value', tokens)\n\n    if (node.value.indexOf(':') !== -1) this.checkMissedSemicolon(tokens)\n  }\n\n  atrule (token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2], token[3])\n\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      if (token[0] === ';') {\n        node.source.end = { line: token[2], column: token[3] }\n        this.semicolon = true\n        break\n      } else if (token[0] === '{') {\n        open = true\n        break\n      } else if (token[0] === '}') {\n        if (params.length > 0) {\n          shift = params.length - 1\n          prev = params[shift]\n          while (prev && prev[0] === 'space') {\n            prev = params[--shift]\n          }\n          if (prev) {\n            node.source.end = { line: prev[4], column: prev[5] }\n          }\n        }\n        this.end(token)\n        break\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = { line: token[4], column: token[5] }\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end (token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = { line: token[2], column: token[3] }\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile () {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon (token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  init (node, line, column) {\n    this.current.push(node)\n\n    node.source = { start: { line, column }, input: this.input }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw (node, prop, tokens) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n    let pattern = /^([.|#])?([\\w])+/i\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n\n      if (type === 'comment' && node.type === 'rule') {\n        prev = tokens[i - 1]\n        next = tokens[i + 1]\n\n        if (\n          prev[0] !== 'space' &&\n          next[0] !== 'space' &&\n          pattern.test(prev[1]) &&\n          pattern.test(next[1])\n        ) {\n          value += token[1]\n        } else {\n          clean = false\n        }\n\n        continue\n      }\n\n      if (type === 'comment' || (type === 'space' && i === length - 1)) {\n        clean = false\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd (tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart (tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd (tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom (tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon (tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let i = 0; i < tokens.length; i++) {\n      token = tokens[i]\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket (bracket) {\n    throw this.input.error('Unclosed bracket', bracket[2], bracket[3])\n  }\n\n  unknownWord (tokens) {\n    throw this.input.error('Unknown word', tokens[0][2], tokens[0][3])\n  }\n\n  unexpectedClose (token) {\n    throw this.input.error('Unexpected }', token[2], token[3])\n  }\n\n  unclosedBlock () {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon (token) {\n    throw this.input.error('Double colon', token[2], token[3])\n  }\n\n  unnamedAtrule (node, token) {\n    throw this.input.error('At-rule without name', token[2], token[3])\n  }\n\n  precheckMissedSemicolon (/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon (tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    throw this.input.error('Missed semicolon', token[2], token[3])\n  }\n}\n"]},"metadata":{},"sourceType":"script"}