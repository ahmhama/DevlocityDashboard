{"ast":null,"code":"\"use strict\";\n\nconst removeSourceMappingUrl = require('./removeSourceMappingUrl');\n\nconst formatLessError = require('./formatLessError');\n/**\n * Removes the sourceMappingURL from the generated CSS, parses the source map and calls the next loader.\n *\n * @param {loaderContext} loaderContext\n * @param {Promise<LessResult>} resultPromise\n */\n\n\nfunction processResult(loaderContext, resultPromise) {\n  const {\n    callback\n  } = loaderContext;\n  resultPromise.then(_ref => {\n    let {\n      css,\n      map,\n      imports\n    } = _ref;\n    imports.forEach(loaderContext.addDependency, loaderContext);\n    return {\n      // Removing the sourceMappingURL comment.\n      // See removeSourceMappingUrl.js for the reasoning behind this.\n      css: removeSourceMappingUrl(css),\n      map: typeof map === 'string' ? JSON.parse(map) : map\n    };\n  }, lessError => {\n    if (lessError.filename) {\n      loaderContext.addDependency(lessError.filename);\n    }\n\n    throw formatLessError(lessError);\n  }).then(_ref2 => {\n    let {\n      css,\n      map\n    } = _ref2;\n    callback(null, css, map);\n  }, callback);\n}\n\nmodule.exports = processResult;","map":{"version":3,"names":["removeSourceMappingUrl","require","formatLessError","processResult","loaderContext","resultPromise","callback","then","css","map","imports","forEach","addDependency","JSON","parse","lessError","filename","module","exports"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/less-loader/dist/processResult.js"],"sourcesContent":["\"use strict\";\n\nconst removeSourceMappingUrl = require('./removeSourceMappingUrl');\n\nconst formatLessError = require('./formatLessError');\n/**\n * Removes the sourceMappingURL from the generated CSS, parses the source map and calls the next loader.\n *\n * @param {loaderContext} loaderContext\n * @param {Promise<LessResult>} resultPromise\n */\n\n\nfunction processResult(loaderContext, resultPromise) {\n  const {\n    callback\n  } = loaderContext;\n  resultPromise.then(({\n    css,\n    map,\n    imports\n  }) => {\n    imports.forEach(loaderContext.addDependency, loaderContext);\n    return {\n      // Removing the sourceMappingURL comment.\n      // See removeSourceMappingUrl.js for the reasoning behind this.\n      css: removeSourceMappingUrl(css),\n      map: typeof map === 'string' ? JSON.parse(map) : map\n    };\n  }, lessError => {\n    if (lessError.filename) {\n      loaderContext.addDependency(lessError.filename);\n    }\n\n    throw formatLessError(lessError);\n  }).then(({\n    css,\n    map\n  }) => {\n    callback(null, css, map);\n  }, callback);\n}\n\nmodule.exports = processResult;"],"mappings":"AAAA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,0BAAD,CAAtC;;AAEA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,aAAT,CAAuBC,aAAvB,EAAsCC,aAAtC,EAAqD;EACnD,MAAM;IACJC;EADI,IAEFF,aAFJ;EAGAC,aAAa,CAACE,IAAd,CAAmB,QAIb;IAAA,IAJc;MAClBC,GADkB;MAElBC,GAFkB;MAGlBC;IAHkB,CAId;IACJA,OAAO,CAACC,OAAR,CAAgBP,aAAa,CAACQ,aAA9B,EAA6CR,aAA7C;IACA,OAAO;MACL;MACA;MACAI,GAAG,EAAER,sBAAsB,CAACQ,GAAD,CAHtB;MAILC,GAAG,EAAE,OAAOA,GAAP,KAAe,QAAf,GAA0BI,IAAI,CAACC,KAAL,CAAWL,GAAX,CAA1B,GAA4CA;IAJ5C,CAAP;EAMD,CAZD,EAYGM,SAAS,IAAI;IACd,IAAIA,SAAS,CAACC,QAAd,EAAwB;MACtBZ,aAAa,CAACQ,aAAd,CAA4BG,SAAS,CAACC,QAAtC;IACD;;IAED,MAAMd,eAAe,CAACa,SAAD,CAArB;EACD,CAlBD,EAkBGR,IAlBH,CAkBQ,SAGF;IAAA,IAHG;MACPC,GADO;MAEPC;IAFO,CAGH;IACJH,QAAQ,CAAC,IAAD,EAAOE,GAAP,EAAYC,GAAZ,CAAR;EACD,CAvBD,EAuBGH,QAvBH;AAwBD;;AAEDW,MAAM,CAACC,OAAP,GAAiBf,aAAjB"},"metadata":{},"sourceType":"script"}