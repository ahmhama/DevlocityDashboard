{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertDataToEntities = convertDataToEntities;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\nexports.convertTreeToData = convertTreeToData;\nexports.fillFieldNames = fillFieldNames;\nexports.flattenTreeData = flattenTreeData;\nexports.getKey = getKey;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.traverseDataNodes = traverseDataNodes;\nexports.warningWithoutKey = warningWithoutKey;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _util = require(\"../util\");\n\nvar _excluded = [\"children\"];\n\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n\nfunction fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      title = _ref.title,\n      _title = _ref._title,\n      key = _ref.key,\n      children = _ref.children;\n\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\n\nfunction warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\n\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!(0, _util.isTreeNode)(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = (0, _objectWithoutProperties2.default)(_treeNode$props, _excluded);\n      var dataNode = (0, _objectSpread2.default)({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\n\nfunction flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n      fieldTitles = _fillFieldNames._title,\n      fieldKey = _fillFieldNames.key,\n      fieldChildren = _fillFieldNames.children;\n\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos); // Pick matched title in field title list\n\n      var mergedTitle;\n\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      } // Add FlattenDataNode into list\n\n\n      var flattenNode = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, (0, _omit.default)(treeNode, [].concat((0, _toConsumableArray2.default)(fieldTitles), [fieldKey, fieldChildren]))), {}, {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\n\nfunction traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n\n  if ((0, _typeof2.default)(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n\n  mergedConfig = mergedConfig || {}; // Init config\n\n  var _mergedConfig = mergedConfig,\n      childrenPropName = _mergedConfig.childrenPropName,\n      externalGetKey = _mergedConfig.externalGetKey,\n      fieldNames = _mergedConfig.fieldNames;\n\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n      fieldKey = _fillFieldNames2.key,\n      fieldChildren = _fillFieldNames2.children;\n\n  var mergeChildrenPropName = childrenPropName || fieldChildren; // Get keys\n\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  } // Process\n\n\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat((0, _toConsumableArray2.default)(pathNodes), [node]) : []; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\n\nfunction convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref2.initWrapper,\n      processEntity = _ref2.processEntity,\n      onProcessFinished = _ref2.onProcessFinished,\n      externalGetKey = _ref2.externalGetKey,\n      childrenPropName = _ref2.childrenPropName,\n      fieldNames = _ref2.fieldNames;\n\n  var\n  /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined; // Init config\n\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level,\n        nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\n\nfunction getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n      selectedKeys = _ref3.selectedKeys,\n      loadedKeys = _ref3.loadedKeys,\n      loadingKeys = _ref3.loadingKeys,\n      checkedKeys = _ref3.checkedKeys,\n      halfCheckedKeys = _ref3.halfCheckedKeys,\n      dragOverNodeKey = _ref3.dragOverNodeKey,\n      dropPosition = _ref3.dropPosition,\n      keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\n\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active,\n      eventKey = props.eventKey;\n  var eventData = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","convertDataToEntities","convertNodePropsToEventData","convertTreeToData","fillFieldNames","flattenTreeData","getKey","getTreeNodeProps","traverseDataNodes","warningWithoutKey","_typeof2","_toConsumableArray2","_objectSpread2","_objectWithoutProperties2","_omit","_toArray","_warning","_util","_excluded","key","pos","undefined","fieldNames","_ref","title","_title","children","mergedTitle","treeData","keys","Map","dig","list","path","arguments","length","forEach","treeNode","default","concat","recordKey","String","has","set","rootNodes","node","treeNodes","map","isTreeNode","_treeNode$props","props","rest","dataNode","parsedChildren","filter","treeNodeList","expandedKeys","_fillFieldNames","fieldTitles","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","index","getPosition","mergedKey","i","fieldTitle","flattenNode","data","isStart","isEnd","push","dataNodes","callback","config","mergedConfig","externalGetKey","_mergedConfig","childrenPropName","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","pathNodes","connectNodes","parentPos","level","nodes","subNode","subIndex","_ref2","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","_ref3","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","active","eventData","get"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/rc-tree/lib/utils/treeUtil.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertDataToEntities = convertDataToEntities;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\nexports.convertTreeToData = convertTreeToData;\nexports.fillFieldNames = fillFieldNames;\nexports.flattenTreeData = flattenTreeData;\nexports.getKey = getKey;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.traverseDataNodes = traverseDataNodes;\nexports.warningWithoutKey = warningWithoutKey;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _util = require(\"../util\");\n\nvar _excluded = [\"children\"];\n\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n\nfunction fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      title = _ref.title,\n      _title = _ref._title,\n      key = _ref.key,\n      children = _ref.children;\n\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\n\nfunction warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\n\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!(0, _util.isTreeNode)(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = (0, _objectWithoutProperties2.default)(_treeNode$props, _excluded);\n      var dataNode = (0, _objectSpread2.default)({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\n\nfunction flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n      fieldTitles = _fillFieldNames._title,\n      fieldKey = _fillFieldNames.key,\n      fieldChildren = _fillFieldNames.children;\n\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos); // Pick matched title in field title list\n\n      var mergedTitle;\n\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      } // Add FlattenDataNode into list\n\n\n      var flattenNode = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, (0, _omit.default)(treeNode, [].concat((0, _toConsumableArray2.default)(fieldTitles), [fieldKey, fieldChildren]))), {}, {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\n\nfunction traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n\n  if ((0, _typeof2.default)(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n\n  mergedConfig = mergedConfig || {}; // Init config\n\n  var _mergedConfig = mergedConfig,\n      childrenPropName = _mergedConfig.childrenPropName,\n      externalGetKey = _mergedConfig.externalGetKey,\n      fieldNames = _mergedConfig.fieldNames;\n\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n      fieldKey = _fillFieldNames2.key,\n      fieldChildren = _fillFieldNames2.children;\n\n  var mergeChildrenPropName = childrenPropName || fieldChildren; // Get keys\n\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  } // Process\n\n\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat((0, _toConsumableArray2.default)(pathNodes), [node]) : []; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\n\nfunction convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref2.initWrapper,\n      processEntity = _ref2.processEntity,\n      onProcessFinished = _ref2.onProcessFinished,\n      externalGetKey = _ref2.externalGetKey,\n      childrenPropName = _ref2.childrenPropName,\n      fieldNames = _ref2.fieldNames;\n\n  var\n  /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level,\n        nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\n\nfunction getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n      selectedKeys = _ref3.selectedKeys,\n      loadedKeys = _ref3.loadedKeys,\n      loadingKeys = _ref3.loadingKeys,\n      checkedKeys = _ref3.checkedKeys,\n      halfCheckedKeys = _ref3.halfCheckedKeys,\n      dragOverNodeKey = _ref3.dragOverNodeKey,\n      dropPosition = _ref3.dropPosition,\n      keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\n\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active,\n      eventKey = props.eventKey;\n  var eventData = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}