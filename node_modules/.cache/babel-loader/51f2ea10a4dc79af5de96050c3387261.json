{"ast":null,"code":"'use strict';\n\nconst resolve = require('path').resolve;\n\nconst config = require('cosmiconfig');\n\nconst loadOptions = require('./options.js');\n\nconst loadPlugins = require('./plugins.js');\n/**\n * Process the result from cosmiconfig\n *\n * @param  {Object} ctx Config Context\n * @param  {Object} result Cosmiconfig result\n *\n * @return {Object} PostCSS Config\n */\n\n\nconst processResult = (ctx, result) => {\n  let file = result.filepath || '';\n  let config = result.config || {};\n\n  if (typeof config === 'function') {\n    config = config(ctx);\n  } else {\n    config = Object.assign({}, config, ctx);\n  }\n\n  if (!config.plugins) {\n    config.plugins = [];\n  }\n\n  return {\n    plugins: loadPlugins(config, file),\n    options: loadOptions(config, file),\n    file: file\n  };\n};\n/**\n * Builds the Config Context\n *\n * @param  {Object} ctx Config Context\n *\n * @return {Object} Config Context\n */\n\n\nconst createContext = ctx => {\n  /**\n   * @type {Object}\n   *\n   * @prop {String} cwd=process.cwd() Config search start location\n   * @prop {String} env=process.env.NODE_ENV Config Enviroment, will be set to `development` by `postcss-load-config` if `process.env.NODE_ENV` is `undefined`\n   */\n  ctx = Object.assign({\n    cwd: process.cwd(),\n    env: process.env.NODE_ENV\n  }, ctx);\n\n  if (!ctx.env) {\n    process.env.NODE_ENV = 'development';\n  }\n\n  return ctx;\n};\n/**\n * Load Config\n *\n * @method rc\n *\n * @param  {Object} ctx Config Context\n * @param  {String} path Config Path\n * @param  {Object} options Config Options\n *\n * @return {Promise} config PostCSS Config\n */\n\n\nconst rc = (ctx, path, options) => {\n  /**\n   * @type {Object} The full Config Context\n   */\n  ctx = createContext(ctx);\n  /**\n   * @type {String} `process.cwd()`\n   */\n\n  path = path ? resolve(path) : process.cwd();\n  return config('postcss', options).search(path).then(result => {\n    if (!result) {\n      throw new Error(`No PostCSS Config found in: ${path}`);\n    }\n\n    return processResult(ctx, result);\n  });\n};\n\nrc.sync = (ctx, path, options) => {\n  /**\n   * @type {Object} The full Config Context\n   */\n  ctx = createContext(ctx);\n  /**\n   * @type {String} `process.cwd()`\n   */\n\n  path = path ? resolve(path) : process.cwd();\n  const result = config('postcss', options).searchSync(path);\n\n  if (!result) {\n    throw new Error(`No PostCSS Config found in: ${path}`);\n  }\n\n  return processResult(ctx, result);\n};\n/**\n * Autoload Config for PostCSS\n *\n * @author Michael Ciniawsky @michael-ciniawsky <michael.ciniawsky@gmail.com>\n * @license MIT\n *\n * @module postcss-load-config\n * @version 2.1.0\n *\n * @requires comsiconfig\n * @requires ./options\n * @requires ./plugins\n */\n\n\nmodule.exports = rc;","map":{"version":3,"names":["resolve","require","config","loadOptions","loadPlugins","processResult","ctx","result","file","filepath","Object","assign","plugins","options","createContext","cwd","process","env","NODE_ENV","rc","path","search","then","Error","sync","searchSync","module","exports"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/postcss-load-config/src/index.js"],"sourcesContent":["'use strict'\n\nconst resolve = require('path').resolve\n\nconst config = require('cosmiconfig')\n\nconst loadOptions = require('./options.js')\nconst loadPlugins = require('./plugins.js')\n\n/**\n * Process the result from cosmiconfig\n *\n * @param  {Object} ctx Config Context\n * @param  {Object} result Cosmiconfig result\n *\n * @return {Object} PostCSS Config\n */\nconst processResult = (ctx, result) => {\n  let file = result.filepath || ''\n  let config = result.config || {}\n\n  if (typeof config === 'function') {\n    config = config(ctx)\n  } else {\n    config = Object.assign({}, config, ctx)\n  }\n\n  if (!config.plugins) {\n    config.plugins = []\n  }\n\n  return {\n    plugins: loadPlugins(config, file),\n    options: loadOptions(config, file),\n    file: file\n  }\n}\n\n/**\n * Builds the Config Context\n *\n * @param  {Object} ctx Config Context\n *\n * @return {Object} Config Context\n */\nconst createContext = (ctx) => {\n  /**\n   * @type {Object}\n   *\n   * @prop {String} cwd=process.cwd() Config search start location\n   * @prop {String} env=process.env.NODE_ENV Config Enviroment, will be set to `development` by `postcss-load-config` if `process.env.NODE_ENV` is `undefined`\n   */\n  ctx = Object.assign({\n    cwd: process.cwd(),\n    env: process.env.NODE_ENV\n  }, ctx)\n\n  if (!ctx.env) {\n    process.env.NODE_ENV = 'development'\n  }\n\n  return ctx\n}\n\n/**\n * Load Config\n *\n * @method rc\n *\n * @param  {Object} ctx Config Context\n * @param  {String} path Config Path\n * @param  {Object} options Config Options\n *\n * @return {Promise} config PostCSS Config\n */\nconst rc = (ctx, path, options) => {\n  /**\n   * @type {Object} The full Config Context\n   */\n  ctx = createContext(ctx)\n\n  /**\n   * @type {String} `process.cwd()`\n   */\n  path = path ? resolve(path) : process.cwd()\n\n  return config('postcss', options)\n    .search(path)\n    .then((result) => {\n      if (!result) {\n        throw new Error(`No PostCSS Config found in: ${path}`)\n      }\n\n      return processResult(ctx, result)\n    })\n}\n\nrc.sync = (ctx, path, options) => {\n  /**\n   * @type {Object} The full Config Context\n   */\n  ctx = createContext(ctx)\n\n  /**\n   * @type {String} `process.cwd()`\n   */\n  path = path ? resolve(path) : process.cwd()\n\n  const result = config('postcss', options).searchSync(path)\n\n  if (!result) {\n    throw new Error(`No PostCSS Config found in: ${path}`)\n  }\n\n  return processResult(ctx, result)\n}\n\n/**\n * Autoload Config for PostCSS\n *\n * @author Michael Ciniawsky @michael-ciniawsky <michael.ciniawsky@gmail.com>\n * @license MIT\n *\n * @module postcss-load-config\n * @version 2.1.0\n *\n * @requires comsiconfig\n * @requires ./options\n * @requires ./plugins\n */\nmodule.exports = rc\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}