{"ast":null,"code":"'use strict';\n\nconst req = require('import-cwd');\n/**\n * Load Options\n *\n * @private\n * @method options\n *\n * @param  {Object} config  PostCSS Config\n *\n * @return {Object} options PostCSS Options\n */\n\n\nconst options = (config, file) => {\n  if (config.parser && typeof config.parser === 'string') {\n    try {\n      config.parser = req(config.parser);\n    } catch (err) {\n      throw new Error(`Loading PostCSS Parser failed: ${err.message}\\n\\n(@${file})`);\n    }\n  }\n\n  if (config.syntax && typeof config.syntax === 'string') {\n    try {\n      config.syntax = req(config.syntax);\n    } catch (err) {\n      throw new Error(`Loading PostCSS Syntax failed: ${err.message}\\n\\n(@${file})`);\n    }\n  }\n\n  if (config.stringifier && typeof config.stringifier === 'string') {\n    try {\n      config.stringifier = req(config.stringifier);\n    } catch (err) {\n      throw new Error(`Loading PostCSS Stringifier failed: ${err.message}\\n\\n(@${file})`);\n    }\n  }\n\n  if (config.plugins) {\n    delete config.plugins;\n  }\n\n  return config;\n};\n\nmodule.exports = options;","map":{"version":3,"names":["req","require","options","config","file","parser","err","Error","message","syntax","stringifier","plugins","module","exports"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/postcss-load-config/src/options.js"],"sourcesContent":["'use strict'\n\nconst req = require('import-cwd')\n\n/**\n * Load Options\n *\n * @private\n * @method options\n *\n * @param  {Object} config  PostCSS Config\n *\n * @return {Object} options PostCSS Options\n */\nconst options = (config, file) => {\n  if (config.parser && typeof config.parser === 'string') {\n    try {\n      config.parser = req(config.parser)\n    } catch (err) {\n      throw new Error(`Loading PostCSS Parser failed: ${err.message}\\n\\n(@${file})`)\n    }\n  }\n\n  if (config.syntax && typeof config.syntax === 'string') {\n    try {\n      config.syntax = req(config.syntax)\n    } catch (err) {\n      throw new Error(`Loading PostCSS Syntax failed: ${err.message}\\n\\n(@${file})`)\n    }\n  }\n\n  if (config.stringifier && typeof config.stringifier === 'string') {\n    try {\n      config.stringifier = req(config.stringifier)\n    } catch (err) {\n      throw new Error(`Loading PostCSS Stringifier failed: ${err.message}\\n\\n(@${file})`)\n    }\n  }\n\n  if (config.plugins) {\n    delete config.plugins\n  }\n\n  return config\n}\n\nmodule.exports = options\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;EAChC,IAAID,MAAM,CAACE,MAAP,IAAiB,OAAOF,MAAM,CAACE,MAAd,KAAyB,QAA9C,EAAwD;IACtD,IAAI;MACFF,MAAM,CAACE,MAAP,GAAgBL,GAAG,CAACG,MAAM,CAACE,MAAR,CAAnB;IACD,CAFD,CAEE,OAAOC,GAAP,EAAY;MACZ,MAAM,IAAIC,KAAJ,CAAW,kCAAiCD,GAAG,CAACE,OAAQ,SAAQJ,IAAK,GAArE,CAAN;IACD;EACF;;EAED,IAAID,MAAM,CAACM,MAAP,IAAiB,OAAON,MAAM,CAACM,MAAd,KAAyB,QAA9C,EAAwD;IACtD,IAAI;MACFN,MAAM,CAACM,MAAP,GAAgBT,GAAG,CAACG,MAAM,CAACM,MAAR,CAAnB;IACD,CAFD,CAEE,OAAOH,GAAP,EAAY;MACZ,MAAM,IAAIC,KAAJ,CAAW,kCAAiCD,GAAG,CAACE,OAAQ,SAAQJ,IAAK,GAArE,CAAN;IACD;EACF;;EAED,IAAID,MAAM,CAACO,WAAP,IAAsB,OAAOP,MAAM,CAACO,WAAd,KAA8B,QAAxD,EAAkE;IAChE,IAAI;MACFP,MAAM,CAACO,WAAP,GAAqBV,GAAG,CAACG,MAAM,CAACO,WAAR,CAAxB;IACD,CAFD,CAEE,OAAOJ,GAAP,EAAY;MACZ,MAAM,IAAIC,KAAJ,CAAW,uCAAsCD,GAAG,CAACE,OAAQ,SAAQJ,IAAK,GAA1E,CAAN;IACD;EACF;;EAED,IAAID,MAAM,CAACQ,OAAX,EAAoB;IAClB,OAAOR,MAAM,CAACQ,OAAd;EACD;;EAED,OAAOR,MAAP;AACD,CA9BD;;AAgCAS,MAAM,CAACC,OAAP,GAAiBX,OAAjB"},"metadata":{},"sourceType":"script"}