{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nimport Metadata, { getCountryCallingCode } from './metadata.js';\nimport getIddPrefix from './helpers/getIddPrefix.js';\nimport { formatRFC3966 } from './helpers/RFC3966.js';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n}; // Formats a phone number\n//\n// Example use cases:\n//\n// ```js\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n// formatNumber('+78005553535', 'NATIONAL')\n// formatNumber('+78005553535', 'NATIONAL', metadata)\n// ```\n//\n\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value; // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}","map":{"version":3,"sources":["../source/format_.js"],"names":["DEFAULT_OPTIONS","formatExtension","metadata","options","input","countryCallingCode","nationalNumber","number","formatNationalNumber","addExtension","formatRFC3966","ext","formattedNumber","formatIDD","format","chooseFormatForNumber","formatNationalNumberUsingFormat","useInternationalFormat","formatAs","withNationalPrefix","carrierCode","lastLeadingDigitsPattern","nationalNnumber","matchesEntirely","fromCountryCallingCode","getCountryCallingCode","iddPrefix","getIddPrefix"],"mappings":"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","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\nimport Metadata, { getCountryCallingCode } from './metadata.js'\r\nimport getIddPrefix from './helpers/getIddPrefix.js'\r\nimport { formatRFC3966 } from './helpers/RFC3966.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits.\r\n\t\t// The test case for \"else path\" could be found by searching for\r\n\t\t// \"format.leadingDigitsPatterns().length === 0\".\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}