{"ast":null,"code":"var _ = require('../helper');\n/* OWASP Special Characters: https://www.owasp.org/index.php/Password_special_characters */\n\n\nvar specialCharacters = [' ', '!', '\"', '#', '\\\\$', '%', '&', '\\'', '\\\\(', '\\\\)', '\\\\*', '\\\\+', ',', '-', '\\\\.', '/', ':', ';', '<', '=', '>', '\\\\?', '@', '\\\\[', '\\\\\\\\', '\\\\]', '\\\\^', '_', '`', '{', '\\\\|', '}', '~'].join('|');\nvar specialCharactersRegexp = new RegExp(specialCharacters);\nmodule.exports = {\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('contains expects expressions to be a non-empty array');\n    }\n\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n\n    if (!ok) {\n      throw new Error('contains expressions are invalid: An explain and a test function should be provided');\n    }\n\n    return true;\n  },\n  explain: function (options) {\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      items: options.expressions.map(function (expression) {\n        return expression.explain();\n      })\n    };\n  },\n  missing: function (options, password) {\n    var expressions = options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n    var verified = expressions.every(function (expression) {\n      return expression.verified;\n    });\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      verified: verified,\n      items: expressions\n    };\n  },\n  assert: function (options, password) {\n    if (!password) {\n      return false;\n    }\n\n    return options.expressions.every(function (expression) {\n      var result = expression.test(password);\n      return result;\n    });\n  },\n  charsets: {\n    upperCase: {\n      explain: function () {\n        return {\n          message: 'upper case letters (A-Z)',\n          code: 'upperCase'\n        };\n      },\n      test: function (password) {\n        return /[A-Z]/.test(password);\n      }\n    },\n    lowerCase: {\n      explain: function () {\n        return {\n          message: 'lower case letters (a-z)',\n          code: 'lowerCase'\n        };\n      },\n      test: function (password) {\n        return /[a-z]/.test(password);\n      }\n    },\n    specialCharacters: {\n      explain: function () {\n        return {\n          message: 'special characters (e.g. !@#$%^&*)',\n          code: 'specialCharacters'\n        };\n      },\n      test: function (password) {\n        return specialCharactersRegexp.test(password);\n      }\n    },\n    numbers: {\n      explain: function () {\n        return {\n          message: 'numbers (i.e. 0-9)',\n          code: 'numbers'\n        };\n      },\n      test: function (password) {\n        return /\\d/.test(password);\n      }\n    }\n  }\n};","map":{"version":3,"names":["_","require","specialCharacters","join","specialCharactersRegexp","RegExp","module","exports","validate","options","isObject","Error","isArray","expressions","isEmpty","ok","every","expression","isFunction","explain","test","message","code","items","map","missing","password","explained","verified","assert","result","charsets","upperCase","lowerCase","numbers"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/password-sheriff/lib/rules/contains.js"],"sourcesContent":["var _ = require('../helper');\n\n/* OWASP Special Characters: https://www.owasp.org/index.php/Password_special_characters */\nvar specialCharacters = [' ', '!', '\"', '#', '\\\\$', '%', '&', '\\'', '\\\\(', '\\\\)', '\\\\*', '\\\\+', ',', '-', '\\\\.', '/', ':', ';', '<', '=', '>', '\\\\?', '@', '\\\\[', '\\\\\\\\', '\\\\]', '\\\\^', '_','`','{','\\\\|', '}','~'].join('|');\n\nvar specialCharactersRegexp = new RegExp(specialCharacters);\n\nmodule.exports = {\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('contains expects expressions to be a non-empty array');\n    }\n\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n\n    if (!ok) {\n      throw new Error('contains expressions are invalid: An explain and a test function should be provided');\n    }\n    return true;\n  },\n  explain: function (options) {\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      items: options.expressions.map(function (expression) {\n        return expression.explain();\n      })\n    };\n  },\n  missing: function (options, password) {\n    var expressions = options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n\n    var verified = expressions.every(function (expression) {\n      return expression.verified;\n    });\n\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      verified: verified,\n      items: expressions\n    };\n  },\n  assert: function (options, password) {\n    if (!password) {\n      return false;\n    }\n\n    return options.expressions.every(function (expression) {\n      var result = expression.test(password);\n      return result;\n    });\n  },\n  charsets: {\n    upperCase: {\n      explain: function () { return {\n        message: 'upper case letters (A-Z)',\n        code: 'upperCase'\n      }; },\n      test: function (password) { return /[A-Z]/.test(password); }\n    },\n    lowerCase: {\n      explain: function () { return {\n        message: 'lower case letters (a-z)',\n        code: 'lowerCase'\n      }; },\n      test: function (password) { return /[a-z]/.test(password); }\n    },\n    specialCharacters: {\n      explain: function () { return {\n        message: 'special characters (e.g. !@#$%^&*)',\n        code: 'specialCharacters'\n      }; },\n      test: function (password) { return specialCharactersRegexp.test(password); }\n    },\n    numbers: {\n      explain: function () { return {\n        message: 'numbers (i.e. 0-9)',\n        code: 'numbers'\n      }; },\n      test: function (password) { return /\\d/.test(password); }\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}