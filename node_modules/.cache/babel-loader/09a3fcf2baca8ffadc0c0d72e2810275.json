{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossibleNumber_.js';\nimport isValidNumber from './validate_.js';\nimport isValidNumberForRegion from './isValidNumberForRegion_.js';\nimport getNumberType from './helpers/getNumberType.js';\nimport formatNumber from './format_.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};","map":{"version":3,"sources":["../source/PhoneNumber.js"],"names":["USE_NON_GEOGRAPHIC_COUNTRY_CODE","PhoneNumber","_metadata","isCountryCode","countryCallingCode","isPossibleNumber","v2","isValidNumber","metadata","phoneNumber","getNumberType","formatNumber","options"],"mappings":"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","sourcesContent":["import Metadata from './metadata.js'\r\nimport isPossibleNumber from './isPossibleNumber_.js'\r\nimport isValidNumber from './validate_.js'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport formatNumber from './format_.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`country` or `countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\tif (!metadata) {\r\n\t\t\tthrow new TypeError('`metadata` not passed')\r\n\t\t}\r\n\t\tconst _metadata = new Metadata(metadata)\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\t\tthis.country = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.metadata)\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)"]},"metadata":{},"sourceType":"module"}