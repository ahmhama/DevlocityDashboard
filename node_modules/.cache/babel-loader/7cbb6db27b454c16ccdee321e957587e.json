{"ast":null,"code":"import createExtensionPattern from './createExtensionPattern.js'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}","map":{"version":3,"sources":["../../../source/helpers/extension/extractExtension.js"],"names":["EXTN_PATTERN","createExtensionPattern","start","number","numberWithoutExtension","matches","i","ext"],"mappings":"AAAA,OAAA,sBAAA,MAAA,6BAAA,C,CAEA;AACA;;AACA,IAAMA,YAAY,GAAG,IAAA,MAAA,CAAW,QAAQC,sBAAR,EAAA,GAAX,IAAA,EAArB,GAAqB,CAArB,C,CAEA;AACA;AACA;;AACA,eAAe,SAAA,gBAAA,CAAA,MAAA,EAAkC;EAChD,IAAMC,KAAK,GAAGC,MAAM,CAANA,MAAAA,CAAd,YAAcA,CAAd;;EACA,IAAID,KAAK,GAAT,CAAA,EAAe;IACd,OAAA,EAAA;EAH+C,CAAA,CAKhD;EACA;;;EACA,IAAME,sBAAsB,GAAGD,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAA/B,KAA+BA,CAA/B;EACA,IAAME,OAAO,GAAGF,MAAM,CAANA,KAAAA,CAAhB,YAAgBA,CAAhB;EACA,IAAIG,CAAC,GAAL,CAAA;;EACA,OAAOA,CAAC,GAAGD,OAAO,CAAlB,MAAA,EAA2B;IAC1B,IAAIA,OAAO,CAAX,CAAW,CAAX,EAAgB;MACf,OAAO;QACNF,MAAM,EADA,sBAAA;QAENI,GAAG,EAAEF,OAAO,CAAA,CAAA;MAFN,CAAP;IAIA;;IACDC,CAAC;EACD;AACD","sourcesContent":["import createExtensionPattern from './createExtensionPattern.js'\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport default function extractExtension(number) {\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst numberWithoutExtension = number.slice(0, start)\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length) {\r\n\t\tif (matches[i]) {\r\n\t\t\treturn {\r\n\t\t\t\tnumber: numberWithoutExtension,\r\n\t\t\t\text: matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}