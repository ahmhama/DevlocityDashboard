{"ast":null,"code":"import Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport extractNationalNumber from './extractNationalNumber.js';\nimport checkNumberLength from './checkNumberLength.js';\nimport getCountryCallingCode from '../getCountryCallingCode.js';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}","map":{"version":3,"sources":["../../source/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js"],"names":["countryCallingCode","country","getCountryCallingCode","number","metadata","possibleShorterNumber","possibleShorterNationalNumber","extractNationalNumber","nationalNumber","matchesEntirely","checkNumberLength"],"mappings":"AAAA,OAAA,QAAA,MAAA,gBAAA;AACA,OAAA,eAAA,MAAA,sBAAA;AACA,OAAA,qBAAA,MAAA,4BAAA;AACA,OAAA,iBAAA,MAAA,wBAAA;AACA,OAAA,qBAAA,MAAA,6BAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAAA,+DAAA,CAAA,MAAA,EAAA,OAAA,EAAA,WAAA,EAAA,QAAA,EAKb;EACD,IAAMA,kBAAkB,GAAGC,OAAO,GAAGC,qBAAqB,CAAA,OAAA,EAAxB,QAAwB,CAAxB,GAAlC,WAAA;;EACA,IAAIC,MAAM,CAANA,OAAAA,CAAAA,kBAAAA,MAAJ,CAAA,EAA8C;IAC7CC,QAAQ,GAAG,IAAA,QAAA,CAAXA,QAAW,CAAXA;IACAA,QAAQ,CAARA,mBAAAA,CAAAA,OAAAA,EAAAA,WAAAA;IACA,IAAMC,qBAAqB,GAAGF,MAAM,CAANA,KAAAA,CAAaH,kBAAkB,CAA7D,MAA8BG,CAA9B;;IACA,IAAA,qBAAA,GAEII,qBAAqB,CAAA,qBAAA,EAFzB,QAEyB,CAFzB;IAAA,IACiBD,6BADjB,GAAA,qBAAA,CAAA,cAAA;;IAMA,IAAA,sBAAA,GAEIC,qBAAqB,CAAA,MAAA,EAFzB,QAEyB,CAFzB;IAAA,IACCC,cADD,GAAA,sBAAA,CAV6C,cAU7C,CAV6C,CAgB7C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IACA,IAEE,CAACC,eAAe,CAAA,cAAA,EAAiBL,QAAQ,CAAzC,qBAAiCA,EAAjB,CAAhB,IAEAK,eAAe,CAAA,6BAAA,EAAgCL,QAAQ,CAHxD,qBAGgDA,EAAhC,CAFf,IAKDM,iBAAiB,CAAA,cAAA,EAAjBA,QAAiB,CAAjBA,KAPD,UAAA,EAQE;MACD,OAAO;QACNV,kBAAkB,EADZ,kBAAA;QAENG,MAAM,EAAEE;MAFF,CAAP;IAIA;EACD;;EACD,OAAO;IAAEF,MAAM,EAANA;EAAF,CAAP;AACA","sourcesContent":["import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport extractNationalNumber from './extractNationalNumber.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\nimport getCountryCallingCode from '../getCountryCallingCode.js'\r\n\r\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\r\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tconst countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode\r\n\tif (number.indexOf(countryCallingCode) === 0) {\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(country, callingCode)\r\n\t\tconst possibleShorterNumber = number.slice(countryCallingCode.length)\r\n\t\tconst {\r\n\t\t\tnationalNumber: possibleShorterNationalNumber,\r\n\t\t} = extractNationalNumber(\r\n\t\t\tpossibleShorterNumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tconst {\r\n\t\t\tnationalNumber\r\n\t\t} = extractNationalNumber(\r\n\t\t\tnumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// If the number was not valid before but is valid now,\r\n\t\t// or if it was too long before, we consider the number\r\n\t\t// with the country calling code stripped to be a better result\r\n\t\t// and keep that instead.\r\n\t\t// For example, in Germany (+49), `49` is a valid area code,\r\n\t\t// so if a number starts with `49`, it could be both a valid\r\n\t\t// national German number or an international number without\r\n\t\t// a leading `+`.\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\t!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t\t&&\r\n\t\t\t\tmatchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t)\r\n\t\t\t||\r\n\t\t\tcheckNumberLength(nationalNumber, metadata) === 'TOO_LONG'\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: possibleShorterNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn { number }\r\n}"]},"metadata":{},"sourceType":"module"}