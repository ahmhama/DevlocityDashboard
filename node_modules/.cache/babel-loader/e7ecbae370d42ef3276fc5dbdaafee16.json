{"ast":null,"code":"var _ = require('../helper');\n\nvar contains = require('./contains');\n\nfunction createIntroMessage() {\n  return 'At least %d of the following %d types of characters:';\n}\n\nmodule.exports = {\n  // TODO validate atLeast to be a number > 0 and expressions to be a list of at least 1\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isNumber(options.atLeast) || _.isNaN(options.atLeast) || options.atLeast < 1) {\n      throw new Error('atLeast should be a valid, non-NaN number, greater than 0');\n    }\n\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('expressions should be an non-empty array');\n    }\n\n    if (options.expressions.length < options.atLeast) {\n      throw new Error('expressions length should be greater than atLeast');\n    }\n\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n\n    if (!ok) {\n      throw new Error('containsAtLeast expressions are invalid: An explain and a test function should be provided');\n    }\n\n    return true;\n  },\n  explain: function (options) {\n    return {\n      message: createIntroMessage(),\n      code: 'containsAtLeast',\n      format: [options.atLeast, options.expressions.length],\n      items: options.expressions.map(function (x) {\n        return x.explain();\n      })\n    };\n  },\n  missing: function (options, password) {\n    var expressions = options.expressions && options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n    var verifiedCount = expressions.reduce(function (val, ex) {\n      return val + !!ex.verified;\n    }, 0);\n    var verified = verifiedCount >= options.atLeast;\n    return {\n      message: createIntroMessage(),\n      code: 'containsAtLeast',\n      format: [options.atLeast, options.expressions.length],\n      items: expressions,\n      verified: verified\n    };\n  },\n  assert: function (options, password) {\n    if (!password) {\n      return false;\n    }\n\n    var workingExpressions = options.expressions.filter(function (expression) {\n      return expression.test(password);\n    });\n    return workingExpressions.length >= options.atLeast;\n  },\n  charsets: contains.charsets\n};","map":{"version":3,"names":["_","require","contains","createIntroMessage","module","exports","validate","options","isObject","Error","isNumber","atLeast","isNaN","isArray","expressions","isEmpty","length","ok","every","expression","isFunction","explain","test","message","code","format","items","map","x","missing","password","explained","verified","verifiedCount","reduce","val","ex","assert","workingExpressions","filter","charsets"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/password-sheriff/lib/rules/containsAtLeast.js"],"sourcesContent":["var _ = require('../helper');\n\nvar contains = require('./contains');\n\nfunction createIntroMessage() {\n  return 'At least %d of the following %d types of characters:';\n}\n\nmodule.exports = {\n  // TODO validate atLeast to be a number > 0 and expressions to be a list of at least 1\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isNumber(options.atLeast) || _.isNaN(options.atLeast) || options.atLeast < 1) {\n      throw new Error('atLeast should be a valid, non-NaN number, greater than 0');\n    }\n\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('expressions should be an non-empty array');\n    }\n\n    if (options.expressions.length < options.atLeast) {\n      throw new Error('expressions length should be greater than atLeast');\n    }\n\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n\n    if (!ok) {\n      throw new Error('containsAtLeast expressions are invalid: An explain and a test function should be provided');\n    }\n\n    return true;\n  },\n  explain: function (options) {\n    return {\n      message: createIntroMessage(),\n      code: 'containsAtLeast',\n      format: [options.atLeast, options.expressions.length],\n      items: options.expressions.map(function (x) { return x.explain(); })\n    };\n  },\n  missing: function (options, password) {\n    var expressions = options.expressions && options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n\n    var verifiedCount = expressions.reduce(function (val, ex) { return val + !!ex.verified; }, 0);\n    var verified = verifiedCount >= options.atLeast;\n\n    return {\n      message: createIntroMessage(),\n      code: 'containsAtLeast',\n      format: [options.atLeast, options.expressions.length],\n      items: expressions,\n      verified: verified\n    };\n  },\n  assert: function (options, password) {\n    if (!password) {\n      return false;\n    }\n\n    var workingExpressions = options.expressions.filter(function (expression) {\n      return expression.test(password);\n    });\n\n    return workingExpressions.length >= options.atLeast;\n  },\n  charsets: contains.charsets\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}