{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { normalizeArguments } from './parsePhoneNumber.js';\nimport parsePhoneNumber from './parsePhoneNumber_.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\nexport default function validatePhoneNumberLength() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  }); // Parse phone number.\n\n  try {\n    var phoneNumber = parsePhoneNumber(text, options, metadata);\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(phoneNumber.countryCallingCode);\n    var result = checkNumberLength(phoneNumber.nationalNumber, metadata);\n\n    if (result !== 'IS_POSSIBLE') {\n      return result;\n    }\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {\n      return error.message;\n    } else {\n      throw error;\n    }\n  }\n}","map":{"version":3,"sources":["../source/validatePhoneNumberLength.js"],"names":["text","options","metadata","normalizeArguments","extract","phoneNumber","parsePhoneNumber","result","checkNumberLength","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,kBAAA,QAAA,uBAAA;AACA,OAAA,gBAAA,MAAA,wBAAA;AACA,OAAA,UAAA,MAAA,iBAAA;AACA,OAAA,QAAA,MAAA,eAAA;AACA,OAAA,iBAAA,MAAA,gCAAA;AAEA,eAAe,SAAA,yBAAA,GAAqC;EACnD,IAAA,mBAAA,GAAkCG,kBAAkB,CAApD,SAAoD,CAApD;EAAA,IAAMH,IAAN,GAAA,mBAAA,CAAA,IAAA;EAAA,IAAYC,OAAZ,GAAA,mBAAA,CAAA,OAAA;EAAA,IAAqBC,QAArB,GAAA,mBAAA,CAAA,QAAA;;EACAD,OAAO,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA;IAENG,OAAO,EAAE;EAFH,CAAA,CAAPH,CAFmD,CAOnD;;EACA,IAAI;IACH,IAAMI,WAAW,GAAGC,gBAAgB,CAAA,IAAA,EAAA,OAAA,EAApC,QAAoC,CAApC;IACAJ,QAAQ,GAAG,IAAA,QAAA,CAAXA,QAAW,CAAXA;IACAA,QAAQ,CAARA,mBAAAA,CAA6BG,WAAW,CAAxCH,kBAAAA;IACA,IAAMK,MAAM,GAAGC,iBAAiB,CAACH,WAAW,CAAZ,cAAA,EAAhC,QAAgC,CAAhC;;IACA,IAAIE,MAAM,KAAV,aAAA,EAA8B;MAC7B,OAAA,MAAA;IACA;EAPF,CAAA,CAQE,OAAA,KAAA,EAAc;IACf;IACA,IAAIE,KAAK,YAAT,UAAA,EAAiC;MAChC,OAAOA,KAAK,CAAZ,OAAA;IADD,CAAA,MAEO;MACN,MAAA,KAAA;IACA;EACD;AACD","sourcesContent":["import { normalizeArguments } from './parsePhoneNumber.js'\r\nimport parsePhoneNumber from './parsePhoneNumber_.js'\r\nimport ParseError from './ParseError.js'\r\nimport Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\nexport default function validatePhoneNumberLength() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(phoneNumber.countryCallingCode)\r\n\t\tconst result = checkNumberLength(phoneNumber.nationalNumber, metadata)\r\n\t\tif (result !== 'IS_POSSIBLE') {\r\n\t\t\treturn result\r\n\t\t}\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\treturn error.message\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}