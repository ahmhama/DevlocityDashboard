{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _sourceMap = _interopRequireDefault(require(\"source-map\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString();\n  } else {\n    return window.atob(str);\n  }\n}\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' })\n * root.input.map //=> PreviousMap\n */\n\n\nvar PreviousMap = /*#__PURE__*/function () {\n  /**\n   * @param {string}         css    Input CSS source.\n   * @param {processOptions} [opts] {@link Processor#process} options.\n   */\n  function PreviousMap(css, opts) {\n    this.loadAnnotation(css);\n    /**\n     * Was source map inlined by data-uri to input CSS.\n     *\n     * @type {boolean}\n     */\n\n    this.inline = this.startWith(this.annotation, 'data:');\n    var prev = opts.map ? opts.map.prev : undefined;\n    var text = this.loadMap(opts.from, prev);\n    if (text) this.text = text;\n  }\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return {SourceMapGenerator} Object with source map information.\n   */\n\n\n  var _proto = PreviousMap.prototype;\n\n  _proto.consumer = function consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new _sourceMap.default.SourceMapConsumer(this.text);\n    }\n\n    return this.consumerCache;\n  }\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return {boolean} Is `sourcesContent` present.\n   */\n  ;\n\n  _proto.withContent = function withContent() {\n    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n  };\n\n  _proto.startWith = function startWith(string, start) {\n    if (!string) return false;\n    return string.substr(0, start.length) === start;\n  };\n\n  _proto.getAnnotationURL = function getAnnotationURL(sourceMapString) {\n    return sourceMapString.match(/\\/\\*\\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\\*\\//)[1].trim();\n  };\n\n  _proto.loadAnnotation = function loadAnnotation(css) {\n    var annotations = css.match(/\\/\\*\\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\\*\\//gm);\n\n    if (annotations && annotations.length > 0) {\n      // Locate the last sourceMappingURL to avoid picking up\n      // sourceMappingURLs from comments, strings, etc.\n      var lastAnnotation = annotations[annotations.length - 1];\n\n      if (lastAnnotation) {\n        this.annotation = this.getAnnotationURL(lastAnnotation);\n      }\n    }\n  };\n\n  _proto.decodeInline = function decodeInline(text) {\n    var baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/;\n    var baseUri = /^data:application\\/json;base64,/;\n    var uri = 'data:application/json,';\n\n    if (this.startWith(text, uri)) {\n      return decodeURIComponent(text.substr(uri.length));\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length));\n    }\n\n    var encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n    throw new Error('Unsupported source map encoding ' + encoding);\n  };\n\n  _proto.loadMap = function loadMap(file, prev) {\n    if (prev === false) return false;\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev;\n      } else if (typeof prev === 'function') {\n        var prevPath = prev(file);\n\n        if (prevPath && _fs.default.existsSync && _fs.default.existsSync(prevPath)) {\n          return _fs.default.readFileSync(prevPath, 'utf-8').toString().trim();\n        } else {\n          throw new Error('Unable to load previous source map: ' + prevPath.toString());\n        }\n      } else if (prev instanceof _sourceMap.default.SourceMapConsumer) {\n        return _sourceMap.default.SourceMapGenerator.fromSourceMap(prev).toString();\n      } else if (prev instanceof _sourceMap.default.SourceMapGenerator) {\n        return prev.toString();\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev);\n      } else {\n        throw new Error('Unsupported previous source map format: ' + prev.toString());\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation);\n    } else if (this.annotation) {\n      var map = this.annotation;\n      if (file) map = _path.default.join(_path.default.dirname(file), map);\n      this.root = _path.default.dirname(map);\n\n      if (_fs.default.existsSync && _fs.default.existsSync(map)) {\n        return _fs.default.readFileSync(map, 'utf-8').toString().trim();\n      } else {\n        return false;\n      }\n    }\n  };\n\n  _proto.isMap = function isMap(map) {\n    if (typeof map !== 'object') return false;\n    return typeof map.mappings === 'string' || typeof map._mappings === 'string';\n  };\n\n  return PreviousMap;\n}();\n\nvar _default = PreviousMap;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["previous-map.es6"],"names":["Buffer","window","PreviousMap","prev","opts","text","consumer","mozilla","withContent","startWith","string","start","getAnnotationURL","sourceMapString","loadAnnotation","annotations","css","lastAnnotation","decodeInline","baseCharsetUri","baseUri","uri","decodeURIComponent","fromBase64","RegExp","encoding","loadMap","prevPath","fs","JSON","map","path","isMap"],"mappings":"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","sourcesContent":["import mozilla from 'source-map'\nimport path from 'path'\nimport fs from 'fs'\n\nfunction fromBase64 (str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    return window.atob(str)\n  }\n}\n\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' })\n * root.input.map //=> PreviousMap\n */\nclass PreviousMap {\n  /**\n   * @param {string}         css    Input CSS source.\n   * @param {processOptions} [opts] {@link Processor#process} options.\n   */\n  constructor (css, opts) {\n    this.loadAnnotation(css)\n    /**\n     * Was source map inlined by data-uri to input CSS.\n     *\n     * @type {boolean}\n     */\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (text) this.text = text\n  }\n\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return {SourceMapGenerator} Object with source map information.\n   */\n  consumer () {\n    if (!this.consumerCache) {\n      this.consumerCache = new mozilla.SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return {boolean} Is `sourcesContent` present.\n   */\n  withContent () {\n    return !!(this.consumer().sourcesContent &&\n              this.consumer().sourcesContent.length > 0)\n  }\n\n  startWith (string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL (sourceMapString) {\n    return sourceMapString\n      .match(/\\/\\*\\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\\*\\//)[1]\n      .trim()\n  }\n\n  loadAnnotation (css) {\n    let annotations = css.match(\n      /\\/\\*\\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\\*\\//gm\n    )\n\n    if (annotations && annotations.length > 0) {\n      // Locate the last sourceMappingURL to avoid picking up\n      // sourceMappingURLs from comments, strings, etc.\n      let lastAnnotation = annotations[annotations.length - 1]\n      if (lastAnnotation) {\n        this.annotation = this.getAnnotationURL(lastAnnotation)\n      }\n    }\n  }\n\n  decodeInline (text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let uri = 'data:application/json,'\n\n    if (this.startWith(text, uri)) {\n      return decodeURIComponent(text.substr(uri.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadMap (file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath && fs.existsSync && fs.existsSync(prevPath)) {\n          return fs.readFileSync(prevPath, 'utf-8').toString().trim()\n        } else {\n          throw new Error(\n            'Unable to load previous source map: ' + prevPath.toString())\n        }\n      } else if (prev instanceof mozilla.SourceMapConsumer) {\n        return mozilla.SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof mozilla.SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString())\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = path.join(path.dirname(file), map)\n\n      this.root = path.dirname(map)\n      if (fs.existsSync && fs.existsSync(map)) {\n        return fs.readFileSync(map, 'utf-8').toString().trim()\n      } else {\n        return false\n      }\n    }\n  }\n\n  isMap (map) {\n    if (typeof map !== 'object') return false\n    return typeof map.mappings === 'string' || typeof map._mappings === 'string'\n  }\n}\n\nexport default PreviousMap\n"]},"metadata":{},"sourceType":"script"}