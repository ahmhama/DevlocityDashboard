{"ast":null,"code":"\"use strict\";\n/* eslint-disable class-methods-use-this */\n\nconst less = require('less');\n\nconst loaderUtils = require('loader-utils');\n\nconst pify = require('pify');\n\nconst stringifyLoader = require.resolve('./stringifyLoader.js');\n\nconst trailingSlash = /[/\\\\]$/;\nconst isLessCompatible = /\\.(le|c)ss$/; // Less automatically adds a .less file extension if no extension was given.\n// This is problematic if there is a module request like @import \"~some-module\";\n// because in this case Less will call our file manager with `~some-module.less`.\n// Since dots in module names are highly discouraged, we can safely assume that\n// this is an error and we need to remove the .less extension again.\n// However, we must not match something like @import \"~some-module/file.less\";\n\nconst matchMalformedModuleFilename = /(~[^/\\\\]+)\\.less$/; // This somewhat changed in Less 3.x. Now the file name comes without the\n// automatically added extension whereas the extension is passed in as `options.ext`.\n// So, if the file name matches this regexp, we simply ignore the proposed extension.\n\nconst isModuleName = /^~[^/\\\\]+$/;\n/**\n * Creates a Less plugin that uses webpack's resolving engine that is provided by the loaderContext.\n *\n * @param {LoaderContext} loaderContext\n * @param {string=} root\n * @returns {LessPlugin}\n */\n\nfunction createWebpackLessPlugin(loaderContext) {\n  const {\n    fs\n  } = loaderContext;\n  const resolve = pify(loaderContext.resolve.bind(loaderContext));\n  const loadModule = pify(loaderContext.loadModule.bind(loaderContext));\n  const readFile = pify(fs.readFile.bind(fs));\n\n  class WebpackFileManager extends less.FileManager {\n    supports() {\n      // Our WebpackFileManager handles all the files\n      return true;\n    } // Sync resolving is used at least by the `data-uri` function.\n    // This file manager doesn't know how to do it, so let's delegate it\n    // to the default file manager of Less.\n    // We could probably use loaderContext.resolveSync, but it's deprecated,\n    // see https://webpack.js.org/api/loaders/#this-resolvesync\n\n\n    supportsSync() {\n      return false;\n    }\n\n    loadFile(filename, currentDirectory, options) {\n      let url;\n\n      if (less.version[0] >= 3) {\n        if (options.ext && !isModuleName.test(filename)) {\n          url = this.tryAppendExtension(filename, options.ext);\n        } else {\n          url = filename;\n        }\n      } else {\n        url = filename.replace(matchMalformedModuleFilename, '$1');\n      }\n\n      const moduleRequest = loaderUtils.urlToRequest(url, url.charAt(0) === '/' ? '' : null); // Less is giving us trailing slashes, but the context should have no trailing slash\n\n      const context = currentDirectory.replace(trailingSlash, '');\n      let resolvedFilename;\n      return resolve(context, moduleRequest).then(f => {\n        resolvedFilename = f;\n        loaderContext.addDependency(resolvedFilename);\n\n        if (isLessCompatible.test(resolvedFilename)) {\n          return readFile(resolvedFilename).then(contents => contents.toString('utf8'));\n        }\n\n        return loadModule([stringifyLoader, resolvedFilename].join('!')).then(JSON.parse);\n      }).then(contents => {\n        return {\n          contents,\n          filename: resolvedFilename\n        };\n      });\n    }\n\n  }\n\n  return {\n    install(lessInstance, pluginManager) {\n      pluginManager.addFileManager(new WebpackFileManager());\n    },\n\n    minVersion: [2, 1, 1]\n  };\n}\n\nmodule.exports = createWebpackLessPlugin;","map":{"version":3,"names":["less","require","loaderUtils","pify","stringifyLoader","resolve","trailingSlash","isLessCompatible","matchMalformedModuleFilename","isModuleName","createWebpackLessPlugin","loaderContext","fs","bind","loadModule","readFile","WebpackFileManager","FileManager","supports","supportsSync","loadFile","filename","currentDirectory","options","url","version","ext","test","tryAppendExtension","replace","moduleRequest","urlToRequest","charAt","context","resolvedFilename","then","f","addDependency","contents","toString","join","JSON","parse","install","lessInstance","pluginManager","addFileManager","minVersion","module","exports"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/less-loader/dist/createWebpackLessPlugin.js"],"sourcesContent":["\"use strict\";\n\n/* eslint-disable class-methods-use-this */\nconst less = require('less');\n\nconst loaderUtils = require('loader-utils');\n\nconst pify = require('pify');\n\nconst stringifyLoader = require.resolve('./stringifyLoader.js');\n\nconst trailingSlash = /[/\\\\]$/;\nconst isLessCompatible = /\\.(le|c)ss$/; // Less automatically adds a .less file extension if no extension was given.\n// This is problematic if there is a module request like @import \"~some-module\";\n// because in this case Less will call our file manager with `~some-module.less`.\n// Since dots in module names are highly discouraged, we can safely assume that\n// this is an error and we need to remove the .less extension again.\n// However, we must not match something like @import \"~some-module/file.less\";\n\nconst matchMalformedModuleFilename = /(~[^/\\\\]+)\\.less$/; // This somewhat changed in Less 3.x. Now the file name comes without the\n// automatically added extension whereas the extension is passed in as `options.ext`.\n// So, if the file name matches this regexp, we simply ignore the proposed extension.\n\nconst isModuleName = /^~[^/\\\\]+$/;\n/**\n * Creates a Less plugin that uses webpack's resolving engine that is provided by the loaderContext.\n *\n * @param {LoaderContext} loaderContext\n * @param {string=} root\n * @returns {LessPlugin}\n */\n\nfunction createWebpackLessPlugin(loaderContext) {\n  const {\n    fs\n  } = loaderContext;\n  const resolve = pify(loaderContext.resolve.bind(loaderContext));\n  const loadModule = pify(loaderContext.loadModule.bind(loaderContext));\n  const readFile = pify(fs.readFile.bind(fs));\n\n  class WebpackFileManager extends less.FileManager {\n    supports() {\n      // Our WebpackFileManager handles all the files\n      return true;\n    } // Sync resolving is used at least by the `data-uri` function.\n    // This file manager doesn't know how to do it, so let's delegate it\n    // to the default file manager of Less.\n    // We could probably use loaderContext.resolveSync, but it's deprecated,\n    // see https://webpack.js.org/api/loaders/#this-resolvesync\n\n\n    supportsSync() {\n      return false;\n    }\n\n    loadFile(filename, currentDirectory, options) {\n      let url;\n\n      if (less.version[0] >= 3) {\n        if (options.ext && !isModuleName.test(filename)) {\n          url = this.tryAppendExtension(filename, options.ext);\n        } else {\n          url = filename;\n        }\n      } else {\n        url = filename.replace(matchMalformedModuleFilename, '$1');\n      }\n\n      const moduleRequest = loaderUtils.urlToRequest(url, url.charAt(0) === '/' ? '' : null); // Less is giving us trailing slashes, but the context should have no trailing slash\n\n      const context = currentDirectory.replace(trailingSlash, '');\n      let resolvedFilename;\n      return resolve(context, moduleRequest).then(f => {\n        resolvedFilename = f;\n        loaderContext.addDependency(resolvedFilename);\n\n        if (isLessCompatible.test(resolvedFilename)) {\n          return readFile(resolvedFilename).then(contents => contents.toString('utf8'));\n        }\n\n        return loadModule([stringifyLoader, resolvedFilename].join('!')).then(JSON.parse);\n      }).then(contents => {\n        return {\n          contents,\n          filename: resolvedFilename\n        };\n      });\n    }\n\n  }\n\n  return {\n    install(lessInstance, pluginManager) {\n      pluginManager.addFileManager(new WebpackFileManager());\n    },\n\n    minVersion: [2, 1, 1]\n  };\n}\n\nmodule.exports = createWebpackLessPlugin;"],"mappings":"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"},"metadata":{},"sourceType":"script"}