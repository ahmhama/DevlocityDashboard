{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nvar _excluded = [\"name\", \"disabled\", \"readOnly\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"initialValueFormat\", \"onCountryChange\", \"limitMaxLength\", \"countryCallingCodeEditable\", \"focusInputOnCountrySelection\", \"reset\", \"metadata\", \"international\", \"locales\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart.js';\nimport InputBasic from './InputBasic.js';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js';\nimport Flag from './Flag.js';\nimport InternationalIcon from './InternationalIcon.js';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './helpers/countries.js';\nimport { createCountryIconComponent } from './CountryIcon.js';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes.js';\nimport { getPreSelectedCountry, getCountrySelectOptions as _getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, getPhoneDigitsForNewCountry, getInitialPhoneDigits, onPhoneDigitsChange, e164 } from './helpers/phoneInputHelpers.js';\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js';\n\nvar PhoneNumberInput_ = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n\n  var _super = _createSuper(PhoneNumberInput_);\n\n  function PhoneNumberInput_(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneNumberInput_);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (instance) {\n      _this.inputRef.current = instance;\n      var ref = _this.props.inputRef;\n\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(instance);\n        } else {\n          ref.current = instance;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n          international = _this$props.international,\n          metadata = _this$props.metadata,\n          onChange = _this$props.onChange,\n          focusInputOnCountrySelection = _this$props.focusInputOnCountrySelection;\n      var _this$state = _this.state,\n          prevPhoneDigits = _this$state.phoneDigits,\n          prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n        prevCountry: prevCountry,\n        newCountry: newCountry,\n        metadata: metadata,\n        // Convert the phone number to \"national\" format\n        // when the user changes the selected country by hand.\n        useNationalFormat: !international\n      });\n      var newValue = e164(newPhoneDigits, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      if (focusInputOnCountrySelection) {\n        _this.inputRef.current.focus();\n      } // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        phoneDigits: newPhoneDigits,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_phoneDigits) {\n      var _this$props2 = _this.props,\n          defaultCountry = _this$props2.defaultCountry,\n          onChange = _this$props2.onChange,\n          addInternationalOption = _this$props2.addInternationalOption,\n          international = _this$props2.international,\n          limitMaxLength = _this$props2.limitMaxLength,\n          countryCallingCodeEditable = _this$props2.countryCallingCodeEditable,\n          metadata = _this$props2.metadata;\n      var _this$state2 = _this.state,\n          countries = _this$state2.countries,\n          prevPhoneDigits = _this$state2.phoneDigits,\n          currentlySelectedCountry = _this$state2.country;\n\n      var _onPhoneDigitsChange = onPhoneDigitsChange(_phoneDigits, {\n        prevPhoneDigits: prevPhoneDigits,\n        country: currentlySelectedCountry,\n        countryRequired: !addInternationalOption,\n        defaultCountry: defaultCountry,\n        getAnyCountry: function getAnyCountry() {\n          return _this.getFirstSupportedCountry({\n            countries: countries\n          });\n        },\n        countries: countries,\n        international: international,\n        limitMaxLength: limitMaxLength,\n        countryCallingCodeEditable: countryCallingCodeEditable,\n        metadata: metadata\n      }),\n          phoneDigits = _onPhoneDigitsChange.phoneDigits,\n          country = _onPhoneDigitsChange.country,\n          value = _onPhoneDigitsChange.value;\n\n      var stateUpdate = {\n        phoneDigits: phoneDigits,\n        value: value,\n        country: country\n      };\n\n      if (countryCallingCodeEditable === false) {\n        // If it simply did `setState({ phoneDigits: intlPrefix })` here,\n        // then it would have no effect when erasing an inital international prefix\n        // via Backspace, because `phoneDigits` in `state` wouldn't change\n        // as a result, because it was `prefix` and it became `prefix`,\n        // so the component wouldn't rerender, and the user would be able\n        // to erase the country calling code part, and that part is\n        // assumed to be non-eraseable. That's why the component is\n        // forcefully rerendered here.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n        if (!value && phoneDigits === _this.state.phoneDigits) {\n          // Force a re-render of the `<input/>` in order to reset its value.\n          stateUpdate.forceRerender = {};\n        }\n      }\n\n      _this.setState(stateUpdate, // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n\n      _this._onBlur();\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n\n    _this.inputRef = /*#__PURE__*/React.createRef();\n    var _this$props3 = _this.props,\n        _value = _this$props3.value,\n        labels = _this$props3.labels,\n        _international = _this$props3.international,\n        _addInternationalOption = _this$props3.addInternationalOption,\n        displayInitialValueAsLocalNumber = _this$props3.displayInitialValueAsLocalNumber,\n        initialValueFormat = _this$props3.initialValueFormat,\n        _metadata = _this$props3.metadata;\n    var _this$props4 = _this.props,\n        _defaultCountry = _this$props4.defaultCountry,\n        _countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n\n    _countries = getSupportedCountries(_countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    var preSelectedCountry = getPreSelectedCountry({\n      value: _value,\n      phoneNumber: phoneNumber,\n      defaultCountry: _defaultCountry,\n      required: !_addInternationalOption,\n      countries: _countries || getCountries(_metadata),\n      getAnyCountry: function getAnyCountry() {\n        return _this.getFirstSupportedCountry({\n          countries: _countries\n        });\n      },\n      metadata: _metadata\n    });\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: preSelectedCountry,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: _countries,\n      // `phoneDigits` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value` is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `phoneDigits` are `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n      phoneDigits: getInitialPhoneDigits({\n        value: _value,\n        phoneNumber: phoneNumber,\n        defaultCountry: _defaultCountry,\n        international: _international,\n        useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n        metadata: _metadata\n      }),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `phoneDigits` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `phoneDigits` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    }\n  }, {\n    key: \"getCountrySelectOptions\",\n    value: function getCountrySelectOptions(_ref) {\n      var countries = _ref.countries;\n      var _this$props5 = this.props,\n          international = _this$props5.international,\n          countryCallingCodeEditable = _this$props5.countryCallingCodeEditable,\n          countryOptionsOrder = _this$props5.countryOptionsOrder,\n          addInternationalOption = _this$props5.addInternationalOption,\n          labels = _this$props5.labels,\n          locales = _this$props5.locales,\n          metadata = _this$props5.metadata;\n      return this.useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(_getCountrySelectOptions({\n          countries: countries || getCountries(metadata),\n          countryNames: labels,\n          addInternationalOption: international && countryCallingCodeEditable === false ? false : addInternationalOption,\n          compareStringsLocales: locales // compareStrings\n\n        }), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n    }\n  }, {\n    key: \"useMemoCountrySelectOptions\",\n    value: function useMemoCountrySelectOptions(generator, dependencies) {\n      if (!this.countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)) {\n        this.countrySelectOptionsMemo = generator();\n        this.countrySelectOptionsMemoDependencies = dependencies;\n      }\n\n      return this.countrySelectOptionsMemo;\n    }\n  }, {\n    key: \"getFirstSupportedCountry\",\n    value: function getFirstSupportedCountry(_ref2) {\n      var countries = _ref2.countries;\n      var countryOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return countryOptions[0].value;\n    } // A shorthand for not passing `metadata` as a second argument.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          name = _this$props6.name,\n          disabled = _this$props6.disabled,\n          readOnly = _this$props6.readOnly,\n          autoComplete = _this$props6.autoComplete,\n          style = _this$props6.style,\n          className = _this$props6.className,\n          inputRef = _this$props6.inputRef,\n          inputComponent = _this$props6.inputComponent,\n          numberInputProps = _this$props6.numberInputProps,\n          smartCaret = _this$props6.smartCaret,\n          CountrySelectComponent = _this$props6.countrySelectComponent,\n          countrySelectProps = _this$props6.countrySelectProps,\n          ContainerComponent = _this$props6.containerComponent,\n          defaultCountry = _this$props6.defaultCountry,\n          countriesProperty = _this$props6.countries,\n          countryOptionsOrder = _this$props6.countryOptionsOrder,\n          labels = _this$props6.labels,\n          flags = _this$props6.flags,\n          flagComponent = _this$props6.flagComponent,\n          flagUrl = _this$props6.flagUrl,\n          addInternationalOption = _this$props6.addInternationalOption,\n          internationalIcon = _this$props6.internationalIcon,\n          displayInitialValueAsLocalNumber = _this$props6.displayInitialValueAsLocalNumber,\n          initialValueFormat = _this$props6.initialValueFormat,\n          onCountryChange = _this$props6.onCountryChange,\n          limitMaxLength = _this$props6.limitMaxLength,\n          countryCallingCodeEditable = _this$props6.countryCallingCodeEditable,\n          focusInputOnCountrySelection = _this$props6.focusInputOnCountrySelection,\n          reset = _this$props6.reset,\n          metadata = _this$props6.metadata,\n          international = _this$props6.international,\n          locales = _this$props6.locales,\n          rest = _objectWithoutProperties(_this$props6, _excluded);\n\n      var _this$state3 = this.state,\n          country = _this$state3.country,\n          countries = _this$state3.countries,\n          phoneDigits = _this$state3.phoneDigits,\n          isFocused = _this$state3.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return /*#__PURE__*/React.createElement(ContainerComponent, {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused,\n          'PhoneInput--disabled': disabled,\n          'PhoneInput--readOnly': readOnly\n        })\n      }, /*#__PURE__*/React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        readOnly: readOnly || countrySelectProps && countrySelectProps.readOnly,\n        iconComponent: this.CountryIcon\n      })), /*#__PURE__*/React.createElement(InputComponent, _extends({\n        ref: this.setInputRef,\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: phoneDigits || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        readOnly: readOnly,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    function getDerivedStateFromProps(props, state) {\n      return _objectSpread({\n        // Emulate `prevProps` via `state.props`.\n        props: props\n      }, getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state));\n    }\n  }]);\n\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\n\nvar PhoneNumberInput = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   *\r\n   * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * A function of `value: string?`.\r\n   *\r\n   * Updates the `value` property as the user inputs a phone number.\r\n   *\r\n   * If the user erases the input value, the argument is `undefined`.\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `disabled`.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `readonly`.\r\n   */\n  readOnly: PropTypes.bool,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string.isRequired,\n\n  /**\r\n   * Set to `\"national\"` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if `initialValueFormat` is `\"national\"`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, `initialValueFormat` is `undefined`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `undefined` by default)\n  initialValueFormat: PropTypes.oneOf(['national']),\n  // `displayInitialValueAsLocalNumber` property has been\n  // superceded by `initialValueFormat` property.\n  displayInitialValueAsLocalNumber: PropTypes.bool,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: labelsPropType.isRequired,\n\n  /**\r\n   * Country `<select/>` options are sorted by their labels.\r\n   * The default sorting function uses `a.localeCompare(b, locales)`,\r\n   * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n   * Some languages, like Chinese, support multiple sorting variants\r\n   * (called \"collations\"), and the user might prefer one or another.\r\n   * Also, sometimes the Operating System language is not always\r\n   * the preferred language for a person using a website or an application,\r\n   * so there should be a way to specify custom locale.\r\n   * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n   * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n   */\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /*\r\n   * Custom country `<select/>` options sorting function.\r\n   * The default one uses `a.localeCompare(b)`, and,\r\n   * if that's not available, falls back to simple `a > b`/`a < b`.\r\n   * There have been requests to add custom sorter for cases\r\n   * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n   * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n  compareStrings: PropTypes.func,\r\n   */\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` gitlab pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: PropTypes.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: PropTypes.bool.isRequired,\n\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"XX\"` — inserts an option for \"XX\" country.\r\n   * * `\"🌐\"` — inserts \"International\" option.\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: PropTypes.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: PropTypes.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `style: object` — A component CSS style object.\r\n   * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n   */\n  containerComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: PropTypes.object,\n\n  /**\r\n   * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n   * the caret position is moved right before the next available digit skipping\r\n   * any punctuation in between. This is called \"smart\" caret positioning.\r\n   * Another case would be the phone number format changing as a result of\r\n   * the user inserting the digit somewhere in the middle, which would require\r\n   * re-positioning the caret because all digit positions have changed.\r\n   * This \"smart\" caret positioning feature can be turned off by passing\r\n   * `smartCaret={false}` property: use it in case of any possible issues\r\n   * with caret position during phone number input.\r\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool.isRequired,\n\n  /**\r\n   * Set to `true` to force \"international\" phone number format.\r\n   * Set to `false` to force \"national\" phone number format.\r\n   * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n   */\n  international: PropTypes.bool,\n\n  /**\r\n   * If set to `true`, the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: PropTypes.bool.isRequired,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: PropTypes.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: metadataPropType.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: PropTypes.bool.isRequired\n};\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Country `<select/>` component.\r\n   */\n  countrySelectComponent: CountrySelect,\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag,\n\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   */\n  containerComponent: 'div',\n\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n\n  /**\r\n   *\r\n   */\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: true,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: true\n};\nexport default PhoneNumberInput;\n\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var i = 0;\n\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../source/PhoneInputWithCountry.js"],"names":["CountrySelectWithIcon","metadata","labels","getCountrySelectOptions","PhoneNumberInput_","React","PureComponent","value","international","addInternationalOption","displayInitialValueAsLocalNumber","initialValueFormat","defaultCountry","countries","getSupportedCountries","phoneNumber","parsePhoneNumber","createCountryIconComponent","preSelectedCountry","getPreSelectedCountry","required","getCountries","getAnyCountry","props","country","phoneDigits","getInitialPhoneDigits","useNationalFormat","onCountryChange","selectedCountry","prevState","ref","countryCallingCodeEditable","countryOptionsOrder","locales","sortCountryOptions","countryNames","compareStringsLocales","getSupportedCountryOptions","areEqualArrays","generator","countryOptions","isCountrySupportedWithError","onChange","focusInputOnCountrySelection","prevPhoneDigits","prevCountry","newPhoneDigits","getPhoneDigitsForNewCountry","newCountry","newValue","e164","hasUserSelectedACountry","limitMaxLength","currentlySelectedCountry","onPhoneDigitsChange","countryRequired","stateUpdate","isFocused","onFocus","onBlur","countrySelectProps","getPhoneInputWithCountryStateUpdateFromNewProps","state","name","disabled","readOnly","autoComplete","style","className","inputRef","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","ContainerComponent","countriesProperty","flags","flagComponent","flagUrl","internationalIcon","reset","rest","InputComponent","countrySelectOptions","classNames","CountryIcon","PhoneNumberInput","PropTypes","labelsPropType","countrySelectComponent","containerComponent","metadataPropType","isRequired","a","b","i"],"mappings":"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B;AACD;AACA;AACA;EACCvB,QAAQ,EAAEuB,SAAS,CArCS,IAAA;;EAuC5B;AACD;AACA;AACA;EACCtB,QAAQ,EAAEsB,SAAS,CA3CS,IAAA;;EA6C5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACArB,YAAY,EAAEqB,SAAS,CAATA,MAAAA,CAlEc,UAAA;;EAoE5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA7E,kBAAkB,EAAE6E,SAAS,CAATA,KAAAA,CAAgB,CAxFR,UAwFQ,CAAhBA,CAxFQ;EA0F5B;EACA;EACA9E,gCAAgC,EAAE8E,SAAS,CA5Ff,IAAA;;EA8F5B;AACD;AACA;AACA;AACA;AACA;EACC;EACA5E,cAAc,EAAE4E,SAAS,CArGG,MAAA;;EAuG5B;AACD;AACA;AACA;AACA;AACA;AACA;EACC3E,SAAS,EAAE2E,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CA9GV,MA8GjBA,CA9GiB;;EAgH5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCtF,MAAM,EAAEuF,cAAc,CA1HM,UAAA;;EA4H5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCvD,OAAO,EAAEsD,SAAS,CAATA,SAAAA,CAAoB,CAC5BA,SAAS,CADmB,MAAA,EAE5BA,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CA3IA,MA2I3BA,CAF4B,CAApBA,CAzImB;;EA8I5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCT,OAAO,EAAES,SAAS,CAATA,MAAAA,CArKmB,UAAA;;EAuK5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCX,KAAK,EAAEW,SAAS,CAATA,QAAAA,CAAmBA,SAAS,CA7LP,WA6LrBA,CA7LqB;;EA+L5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCV,aAAa,EAAEU,SAAS,CAATA,WAAAA,CAzMa,UAAA;;EA2M5B;AACD;AACA;EACC/E,sBAAsB,EAAE+E,SAAS,CAATA,IAAAA,CA9MI,UAAA;;EAgN5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCR,iBAAiB,EAAEQ,SAAS,CAATA,WAAAA,CAxNS,UAAA;;EA0N5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCvD,mBAAmB,EAAEuD,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAtOpB,MAsOPA,CAtOO;;EAwO5B;AACD;AACA;EACCpB,KAAK,EAAEoB,SAAS,CA3OY,MAAA;;EA6O5B;AACD;AACA;EACCnB,SAAS,EAAEmB,SAAS,CAhPQ,MAAA;;EAkP5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,sBAAsB,EAAEF,SAAS,CAATA,WAAAA,CAnQI,UAAA;;EAqQ5B;AACD;AACA;AACA;AACA;EACC3B,kBAAkB,EAAE2B,SAAS,CA1QD,MAAA;;EA4Q5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCjB,cAAc,EAAEiB,SAAS,CAATA,WAAAA,CAzRY,UAAA;;EA2R5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCG,kBAAkB,EAAEH,SAAS,CAATA,WAAAA,CAnSQ,UAAA;;EAqS5B;AACD;AACA;EACChB,gBAAgB,EAAEgB,SAAS,CAxSC,MAAA;;EA0S5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAf,UAAU,EAAEe,SAAS,CAATA,IAAAA,CAtTgB,UAAA;;EAwT5B;AACD;AACA;AACA;AACA;EACChF,aAAa,EAAEgF,SAAS,CA7TI,IAAA;;EA+T5B;AACD;AACA;AACA;EACCnC,cAAc,EAAEmC,SAAS,CAATA,IAAAA,CAnUY,UAAA;;EAqU5B;AACD;AACA;AACA;AACA;EACCxD,0BAA0B,EAAEwD,SAAS,CAATA,IAAAA,CA1UA,UAAA;;EA4U5B;AACD;AACA;AACA;AACA;AACA;EACCvF,QAAQ,EAAE2F,gBAAgB,CAlVE,UAAA;;EAoV5B;AACD;AACA;AACA;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAhE,eAAe,EAAE4D,SAAS,CAhWE,IAAA;;EAkW5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC5C,4BAA4B,EAAE4C,SAAS,CAATA,IAAAA,CAAeK;AA3WjB,CAA7BN;AA8WAA,gBAAgB,CAAhBA,YAAAA,GAAgC;EAC/B;AACD;AACA;EACCpB,YAAY,EAJmB,KAAA;;EAM/B;AACD;AACA;EACCuB,sBAAsB,EATS,aAAA;;EAW/B;AACD;AACA;EACCZ,aAAa,EAdkB,IAAA;;EAgB/B;AACD;AACA;EACC;EACAC,OAAO,EApBwB,sEAAA;;EAsB/B;AACD;AACA;EACCC,iBAAiB,EAzBc,iBAAA;;EA2B/B;AACD;AACA;EACCT,cAAc,EA9BiB,OAAA;;EAgC/B;AACD;AACA;EACCoB,kBAAkB,EAnCa,KAAA;;EAqC/B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAV,KAAK,EAAEO,SAAS,CAlDe,GAAA;;EAoD/B;AACD;AACA;;EAEC;AACD;AACA;EACCf,UAAU,EA3DqB,IAAA;;EA6D/B;AACD;AACA;AACA;EACChE,sBAAsB,EAjES,IAAA;;EAmE/B;AACD;AACA;AACA;EACC4C,cAAc,EAvEiB,KAAA;;EAyE/B;AACD;AACA;AACA;AACA;EACCrB,0BAA0B,EA9EK,IAAA;;EAgF/B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCY,4BAA4B,EAAE;AAzFC,CAAhC2C;AA4FA,eAAA,gBAAA;;AAEA,SAAA,cAAA,CAAA,CAAA,EAAA,CAAA,EAA8B;EAC7B,IAAIO,CAAC,CAADA,MAAAA,KAAaC,CAAC,CAAlB,MAAA,EAA2B;IAC1B,OAAA,KAAA;EACA;;EACD,IAAIC,CAAC,GAAL,CAAA;;EACA,OAAOA,CAAC,GAAGF,CAAC,CAAZ,MAAA,EAAqB;IACpB,IAAIA,CAAC,CAADA,CAAC,CAADA,KAASC,CAAC,CAAd,CAAc,CAAd,EAAmB;MAClB,OAAA,KAAA;IACA;;IACDC,CAAC;EACD;;EACD,OAAA,IAAA;AACA","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js'\r\n\r\nimport Flag from './Flag.js'\r\nimport InternationalIcon from './InternationalIcon.js'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './helpers/countries.js'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon.js'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes.js'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\tgetInitialPhoneDigits,\r\n\tonPhoneDigitsChange,\r\n\te164\r\n} from './helpers/phoneInputHelpers.js'\r\n\r\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.inputRef = React.createRef()\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\taddInternationalOption,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tconst preSelectedCountry = getPreSelectedCountry({\r\n\t\t\tvalue,\r\n\t\t\tphoneNumber,\r\n\t\t\tdefaultCountry,\r\n\t\t\trequired: !addInternationalOption,\r\n\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: preSelectedCountry,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\r\n\t\t\tphoneDigits: getInitialPhoneDigits({\r\n\t\t\t\tvalue,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `phoneDigits` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\tsetInputRef = (instance) => {\r\n\t\tthis.inputRef.current = instance\r\n\t\tconst { inputRef: ref } = this.props\r\n\t\tif (ref) {\r\n\t\t\tif (typeof ref === 'function') {\r\n\t\t\t\tref(instance)\r\n\t\t\t} else {\r\n\t\t\t\tref.current = instance\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountrySelectOptions({ countries }) {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tlocales,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\t\treturn this.useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions({\r\n\t\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\t\tcountryNames: labels,\r\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\r\n\t\t\t\t\tcompareStringsLocales: locales,\r\n\t\t\t\t\t// compareStrings\r\n\t\t\t\t}),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\t}\r\n\r\n\tuseMemoCountrySelectOptions(generator, dependencies) {\r\n\t\tif (\r\n\t\t\t!this.countrySelectOptionsMemoDependencies ||\r\n\t\t\t!areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)\r\n\t\t) {\r\n\t\t\tthis.countrySelectOptionsMemo = generator()\r\n\t\t\tthis.countrySelectOptionsMemoDependencies = dependencies\r\n\t\t}\r\n\t\treturn this.countrySelectOptionsMemo\r\n\t}\r\n\r\n\tgetFirstSupportedCountry({ countries }) {\r\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\r\n\t\treturn countryOptions[0].value\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tfocusInputOnCountrySelection\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tuseNationalFormat: !international\r\n\t\t})\r\n\r\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tif (focusInputOnCountrySelection) {\r\n\t\t\tthis.inputRef.current.focus()\r\n\t\t}\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tphoneDigits: newPhoneDigits,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_phoneDigits) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry\r\n\t\t} = this.state\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tcountryRequired: !addInternationalOption,\r\n\t\t\tdefaultCountry,\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst stateUpdate = {\r\n\t\t\tphoneDigits,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t}\r\n\r\n\t\tif (countryCallingCodeEditable === false) {\r\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\r\n\t\t\t// then it would have no effect when erasing an inital international prefix\r\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t// forcefully rerendered here.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\r\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\r\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\r\n\t\t\t\tstateUpdate.forceRerender = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\tstateUpdate,\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\t() => onChange(value)\r\n\t\t)\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\treturn {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\treadOnly,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Container `<div/>` properties.\r\n\t\t\tcontainerComponent: ContainerComponent,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries: countriesProperty,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tfocusInputOnCountrySelection,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\tlocales,\r\n\t\t\t// compareStrings,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\r\n\r\n\t\treturn (\r\n\t\t\t<ContainerComponent\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused,\r\n\t\t\t\t\t'PhoneInput--disabled': disabled,\r\n\t\t\t\t\t'PhoneInput--readOnly': readOnly\r\n\t\t\t\t})}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\treadOnly={readOnly || (countrySelectProps && countrySelectProps.readOnly)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.setInputRef}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={phoneDigits || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\treadOnly={readOnly}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</ContainerComponent>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...props} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t *\r\n\t * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t *\r\n\t * Updates the `value` property as the user inputs a phone number.\r\n\t *\r\n\t * If the user erases the input value, the argument is `undefined`.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `disabled`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `readonly`.\r\n\t */\r\n\treadOnly: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Set to `\"national\"` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if `initialValueFormat` is `\"national\"`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, `initialValueFormat` is `undefined`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `undefined` by default)\r\n\tinitialValueFormat: PropTypes.oneOf(['national']),\r\n\r\n\t// `displayInitialValueAsLocalNumber` property has been\r\n\t// superceded by `initialValueFormat` property.\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` options are sorted by their labels.\r\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\r\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n\t * Some languages, like Chinese, support multiple sorting variants\r\n\t * (called \"collations\"), and the user might prefer one or another.\r\n\t * Also, sometimes the Operating System language is not always\r\n\t * the preferred language for a person using a website or an application,\r\n\t * so there should be a way to specify custom locale.\r\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n\t */\r\n\tlocales: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.arrayOf(PropTypes.string)\r\n\t]),\r\n\r\n\t/*\r\n\t * Custom country `<select/>` options sorting function.\r\n\t * The default one uses `a.localeCompare(b)`, and,\r\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\r\n\t * There have been requests to add custom sorter for cases\r\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n\tcompareStrings: PropTypes.func,\r\n\t */\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\r\n\t * * `\"🌐\"` — inserts \"International\" option.\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `style: object` — A component CSS style object.\r\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n\t */\r\n\tcontainerComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n\t * the caret position is moved right before the next available digit skipping\r\n\t * any punctuation in between. This is called \"smart\" caret positioning.\r\n\t * Another case would be the phone number format changing as a result of\r\n\t * the user inserting the digit somewhere in the middle, which would require\r\n\t * re-positioning the caret because all digit positions have changed.\r\n\t * This \"smart\" caret positioning feature can be turned off by passing\r\n\t * `smartCaret={false}` property: use it in case of any possible issues\r\n\t * with caret position during phone number input.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t * Set to `false` to force \"national\" phone number format.\r\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType.isRequired,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: PropTypes.bool.isRequired\r\n}\r\n\r\nPhoneNumberInput.defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t */\r\n\tcountrySelectComponent: CountrySelect,\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t */\r\n\tcontainerComponent: 'div',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `true` the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: false,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: true,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: true\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n"]},"metadata":{},"sourceType":"module"}