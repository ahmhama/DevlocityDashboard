{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _sourceMap = _interopRequireDefault(require(\"source-map\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar MapGenerator = /*#__PURE__*/function () {\n  function MapGenerator(stringify, root, opts) {\n    this.stringify = stringify;\n    this.mapOpts = opts.map || {};\n    this.root = root;\n    this.opts = opts;\n  }\n\n  var _proto = MapGenerator.prototype;\n\n  _proto.isMap = function isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map;\n    }\n\n    return this.previous().length > 0;\n  };\n\n  _proto.previous = function previous() {\n    var _this = this;\n\n    if (!this.previousMaps) {\n      this.previousMaps = [];\n      this.root.walk(function (node) {\n        if (node.source && node.source.input.map) {\n          var map = node.source.input.map;\n\n          if (_this.previousMaps.indexOf(map) === -1) {\n            _this.previousMaps.push(map);\n          }\n        }\n      });\n    }\n\n    return this.previousMaps;\n  };\n\n  _proto.isInline = function isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline;\n    }\n\n    var annotation = this.mapOpts.annotation;\n\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false;\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(function (i) {\n        return i.inline;\n      });\n    }\n\n    return true;\n  };\n\n  _proto.isSourcesContent = function isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent;\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(function (i) {\n        return i.withContent();\n      });\n    }\n\n    return true;\n  };\n\n  _proto.clearAnnotation = function clearAnnotation() {\n    if (this.mapOpts.annotation === false) return;\n    var node;\n\n    for (var i = this.root.nodes.length - 1; i >= 0; i--) {\n      node = this.root.nodes[i];\n      if (node.type !== 'comment') continue;\n\n      if (node.text.indexOf('# sourceMappingURL=') === 0) {\n        this.root.removeChild(i);\n      }\n    }\n  };\n\n  _proto.setSourcesContent = function setSourcesContent() {\n    var _this2 = this;\n\n    var already = {};\n    this.root.walk(function (node) {\n      if (node.source) {\n        var from = node.source.input.from;\n\n        if (from && !already[from]) {\n          already[from] = true;\n\n          var relative = _this2.relative(from);\n\n          _this2.map.setSourceContent(relative, node.source.input.css);\n        }\n      }\n    });\n  };\n\n  _proto.applyPrevMaps = function applyPrevMaps() {\n    for (var _iterator = _createForOfIteratorHelperLoose(this.previous()), _step; !(_step = _iterator()).done;) {\n      var prev = _step.value;\n      var from = this.relative(prev.file);\n\n      var root = prev.root || _path.default.dirname(prev.file);\n\n      var map = void 0;\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new _sourceMap.default.SourceMapConsumer(prev.text);\n\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(function () {\n            return null;\n          });\n        }\n      } else {\n        map = prev.consumer();\n      }\n\n      this.map.applySourceMap(map, from, this.relative(root));\n    }\n  };\n\n  _proto.isAnnotation = function isAnnotation() {\n    if (this.isInline()) {\n      return true;\n    }\n\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation;\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(function (i) {\n        return i.annotation;\n      });\n    }\n\n    return true;\n  };\n\n  _proto.toBase64 = function toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64');\n    }\n\n    return window.btoa(unescape(encodeURIComponent(str)));\n  };\n\n  _proto.addAnnotation = function addAnnotation() {\n    var content;\n\n    if (this.isInline()) {\n      content = 'data:application/json;base64,' + this.toBase64(this.map.toString());\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation;\n    } else {\n      content = this.outputFile() + '.map';\n    }\n\n    var eol = '\\n';\n    if (this.css.indexOf('\\r\\n') !== -1) eol = '\\r\\n';\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */';\n  };\n\n  _proto.outputFile = function outputFile() {\n    if (this.opts.to) {\n      return this.relative(this.opts.to);\n    }\n\n    if (this.opts.from) {\n      return this.relative(this.opts.from);\n    }\n\n    return 'to.css';\n  };\n\n  _proto.generateMap = function generateMap() {\n    this.generateString();\n    if (this.isSourcesContent()) this.setSourcesContent();\n    if (this.previous().length > 0) this.applyPrevMaps();\n    if (this.isAnnotation()) this.addAnnotation();\n\n    if (this.isInline()) {\n      return [this.css];\n    }\n\n    return [this.css, this.map];\n  };\n\n  _proto.relative = function relative(file) {\n    if (file.indexOf('<') === 0) return file;\n    if (/^\\w+:\\/\\//.test(file)) return file;\n    var from = this.opts.to ? _path.default.dirname(this.opts.to) : '.';\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = _path.default.dirname(_path.default.resolve(from, this.mapOpts.annotation));\n    }\n\n    file = _path.default.relative(from, file);\n\n    if (_path.default.sep === '\\\\') {\n      return file.replace(/\\\\/g, '/');\n    }\n\n    return file;\n  };\n\n  _proto.sourcePath = function sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.mapOpts.from;\n    }\n\n    return this.relative(node.source.input.from);\n  };\n\n  _proto.generateString = function generateString() {\n    var _this3 = this;\n\n    this.css = '';\n    this.map = new _sourceMap.default.SourceMapGenerator({\n      file: this.outputFile()\n    });\n    var line = 1;\n    var column = 1;\n    var lines, last;\n    this.stringify(this.root, function (str, node, type) {\n      _this3.css += str;\n\n      if (node && type !== 'end') {\n        if (node.source && node.source.start) {\n          _this3.map.addMapping({\n            source: _this3.sourcePath(node),\n            generated: {\n              line: line,\n              column: column - 1\n            },\n            original: {\n              line: node.source.start.line,\n              column: node.source.start.column - 1\n            }\n          });\n        } else {\n          _this3.map.addMapping({\n            source: '<no source>',\n            original: {\n              line: 1,\n              column: 0\n            },\n            generated: {\n              line: line,\n              column: column - 1\n            }\n          });\n        }\n      }\n\n      lines = str.match(/\\n/g);\n\n      if (lines) {\n        line += lines.length;\n        last = str.lastIndexOf('\\n');\n        column = str.length - last;\n      } else {\n        column += str.length;\n      }\n\n      if (node && type !== 'start') {\n        var p = node.parent || {\n          raws: {}\n        };\n\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            _this3.map.addMapping({\n              source: _this3.sourcePath(node),\n              generated: {\n                line: line,\n                column: column - 2\n              },\n              original: {\n                line: node.source.end.line,\n                column: node.source.end.column - 1\n              }\n            });\n          } else {\n            _this3.map.addMapping({\n              source: '<no source>',\n              original: {\n                line: 1,\n                column: 0\n              },\n              generated: {\n                line: line,\n                column: column - 1\n              }\n            });\n          }\n        }\n      }\n    });\n  };\n\n  _proto.generate = function generate() {\n    this.clearAnnotation();\n\n    if (this.isMap()) {\n      return this.generateMap();\n    }\n\n    var result = '';\n    this.stringify(this.root, function (i) {\n      result += i;\n    });\n    return [result];\n  };\n\n  return MapGenerator;\n}();\n\nvar _default = MapGenerator;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["map-generator.es6"],"names":["MapGenerator","opts","isMap","previous","node","map","isInline","annotation","i","isSourcesContent","clearAnnotation","setSourcesContent","already","from","relative","applyPrevMaps","prev","root","path","mozilla","isAnnotation","toBase64","Buffer","window","unescape","encodeURIComponent","addAnnotation","content","eol","outputFile","generateMap","file","sourcePath","generateString","line","column","type","source","generated","original","lines","str","last","p","raws","generate","result"],"mappings":"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","sourcesContent":["import mozilla from 'source-map'\nimport path from 'path'\n\nclass MapGenerator {\n  constructor (stringify, root, opts) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || { }\n    this.root = root\n    this.opts = opts\n  }\n\n  isMap () {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous () {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      this.root.walk(node => {\n        if (node.source && node.source.input.map) {\n          let map = node.source.input.map\n          if (this.previousMaps.indexOf(map) === -1) {\n            this.previousMaps.push(map)\n          }\n        }\n      })\n    }\n\n    return this.previousMaps\n  }\n\n  isInline () {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent () {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation () {\n    if (this.mapOpts.annotation === false) return\n\n    let node\n    for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n      node = this.root.nodes[i]\n      if (node.type !== 'comment') continue\n      if (node.text.indexOf('# sourceMappingURL=') === 0) {\n        this.root.removeChild(i)\n      }\n    }\n  }\n\n  setSourcesContent () {\n    let already = { }\n    this.root.walk(node => {\n      if (node.source) {\n        let from = node.source.input.from\n        if (from && !already[from]) {\n          already[from] = true\n          let relative = this.relative(from)\n          this.map.setSourceContent(relative, node.source.input.css)\n        }\n      }\n    })\n  }\n\n  applyPrevMaps () {\n    for (let prev of this.previous()) {\n      let from = this.relative(prev.file)\n      let root = prev.root || path.dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new mozilla.SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.relative(root))\n    }\n  }\n\n  isAnnotation () {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64 (str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    }\n    return window.btoa(unescape(encodeURIComponent(str)))\n  }\n\n  addAnnotation () {\n    let content\n\n    if (this.isInline()) {\n      content = 'data:application/json;base64,' +\n                this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else {\n      content = this.outputFile() + '.map'\n    }\n\n    let eol = '\\n'\n    if (this.css.indexOf('\\r\\n') !== -1) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile () {\n    if (this.opts.to) {\n      return this.relative(this.opts.to)\n    }\n    if (this.opts.from) {\n      return this.relative(this.opts.from)\n    }\n    return 'to.css'\n  }\n\n  generateMap () {\n    this.generateString()\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    }\n    return [this.css, this.map]\n  }\n\n  relative (file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n\n    let from = this.opts.to ? path.dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = path.dirname(path.resolve(from, this.mapOpts.annotation))\n    }\n\n    file = path.relative(from, file)\n    if (path.sep === '\\\\') {\n      return file.replace(/\\\\/g, '/')\n    }\n    return file\n  }\n\n  sourcePath (node) {\n    if (this.mapOpts.from) {\n      return this.mapOpts.from\n    }\n    return this.relative(node.source.input.from)\n  }\n\n  generateString () {\n    this.css = ''\n    this.map = new mozilla.SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        if (node.source && node.source.start) {\n          this.map.addMapping({\n            source: this.sourcePath(node),\n            generated: { line, column: column - 1 },\n            original: {\n              line: node.source.start.line,\n              column: node.source.start.column - 1\n            }\n          })\n        } else {\n          this.map.addMapping({\n            source: '<no source>',\n            original: { line: 1, column: 0 },\n            generated: { line, column: column - 1 }\n          })\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: { } }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            this.map.addMapping({\n              source: this.sourcePath(node),\n              generated: { line, column: column - 2 },\n              original: {\n                line: node.source.end.line,\n                column: node.source.end.column - 1\n              }\n            })\n          } else {\n            this.map.addMapping({\n              source: '<no source>',\n              original: { line: 1, column: 0 },\n              generated: { line, column: column - 1 }\n            })\n          }\n        }\n      }\n    })\n  }\n\n  generate () {\n    this.clearAnnotation()\n\n    if (this.isMap()) {\n      return this.generateMap()\n    }\n\n    let result = ''\n    this.stringify(this.root, i => {\n      result += i\n    })\n    return [result]\n  }\n}\n\nexport default MapGenerator\n"]},"metadata":{},"sourceType":"script"}