{"ast":null,"code":"\"use strict\";\n\nconst os = require('os');\n/**\n * Tries to get an excerpt of the file where the error happened.\n * Uses err.line and err.column.\n *\n * Returns an empty string if the excerpt could not be retrieved.\n *\n * @param {LessError} err\n * @returns {Array<string>}\n */\n\n\nfunction getFileExcerptIfPossible(lessErr) {\n  try {\n    const excerpt = lessErr.extract.slice(0, 2);\n    const column = Math.max(lessErr.column - 1, 0);\n\n    if (typeof excerpt[0] === 'undefined') {\n      excerpt.shift();\n    }\n\n    excerpt.push(`${new Array(column).join(' ')}^`);\n    return excerpt;\n  } catch (unexpectedErr) {\n    // If anything goes wrong here, we don't want any errors to be reported to the user\n    return [];\n  }\n}\n/**\n * Beautifies the error message from Less.\n *\n * @param {LessError} lessErr\n * @param {string} lessErr.type - e.g. 'Name'\n * @param {string} lessErr.message - e.g. '.undefined-mixin is undefined'\n * @param {string} lessErr.filename - e.g. '/path/to/style.less'\n * @param {number} lessErr.index - e.g. 352\n * @param {number} lessErr.line - e.g. 31\n * @param {number} lessErr.callLine - e.g. NaN\n * @param {string} lessErr.callExtract - e.g. undefined\n * @param {number} lessErr.column - e.g. 6\n * @param {Array<string>} lessErr.extract - e.g. ['    .my-style {', '      .undefined-mixin;', '      display: block;']\n * @returns {LessError}\n */\n\n\nfunction formatLessError(err) {\n  /* eslint-disable no-param-reassign */\n  const msg = err.message; // Instruct webpack to hide the JS stack from the console\n  // Usually you're only interested in the SASS stack in this case.\n\n  err.hideStack = true;\n  err.message = [os.EOL, ...getFileExcerptIfPossible(err), msg.charAt(0).toUpperCase() + msg.slice(1), `      in ${err.filename} (line ${err.line}, column ${err.column})`].join(os.EOL);\n  return err;\n}\n/* eslint-enable no-param-reassign */\n\n\nmodule.exports = formatLessError;","map":{"version":3,"names":["os","require","getFileExcerptIfPossible","lessErr","excerpt","extract","slice","column","Math","max","shift","push","Array","join","unexpectedErr","formatLessError","err","msg","message","hideStack","EOL","charAt","toUpperCase","filename","line","module","exports"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/less-loader/dist/formatLessError.js"],"sourcesContent":["\"use strict\";\n\nconst os = require('os');\n/**\n * Tries to get an excerpt of the file where the error happened.\n * Uses err.line and err.column.\n *\n * Returns an empty string if the excerpt could not be retrieved.\n *\n * @param {LessError} err\n * @returns {Array<string>}\n */\n\n\nfunction getFileExcerptIfPossible(lessErr) {\n  try {\n    const excerpt = lessErr.extract.slice(0, 2);\n    const column = Math.max(lessErr.column - 1, 0);\n\n    if (typeof excerpt[0] === 'undefined') {\n      excerpt.shift();\n    }\n\n    excerpt.push(`${new Array(column).join(' ')}^`);\n    return excerpt;\n  } catch (unexpectedErr) {\n    // If anything goes wrong here, we don't want any errors to be reported to the user\n    return [];\n  }\n}\n/**\n * Beautifies the error message from Less.\n *\n * @param {LessError} lessErr\n * @param {string} lessErr.type - e.g. 'Name'\n * @param {string} lessErr.message - e.g. '.undefined-mixin is undefined'\n * @param {string} lessErr.filename - e.g. '/path/to/style.less'\n * @param {number} lessErr.index - e.g. 352\n * @param {number} lessErr.line - e.g. 31\n * @param {number} lessErr.callLine - e.g. NaN\n * @param {string} lessErr.callExtract - e.g. undefined\n * @param {number} lessErr.column - e.g. 6\n * @param {Array<string>} lessErr.extract - e.g. ['    .my-style {', '      .undefined-mixin;', '      display: block;']\n * @returns {LessError}\n */\n\n\nfunction formatLessError(err) {\n  /* eslint-disable no-param-reassign */\n  const msg = err.message; // Instruct webpack to hide the JS stack from the console\n  // Usually you're only interested in the SASS stack in this case.\n\n  err.hideStack = true;\n  err.message = [os.EOL, ...getFileExcerptIfPossible(err), msg.charAt(0).toUpperCase() + msg.slice(1), `      in ${err.filename} (line ${err.line}, column ${err.column})`].join(os.EOL);\n  return err;\n}\n/* eslint-enable no-param-reassign */\n\n\nmodule.exports = formatLessError;"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;EACzC,IAAI;IACF,MAAMC,OAAO,GAAGD,OAAO,CAACE,OAAR,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAhB;IACA,MAAMC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASN,OAAO,CAACI,MAAR,GAAiB,CAA1B,EAA6B,CAA7B,CAAf;;IAEA,IAAI,OAAOH,OAAO,CAAC,CAAD,CAAd,KAAsB,WAA1B,EAAuC;MACrCA,OAAO,CAACM,KAAR;IACD;;IAEDN,OAAO,CAACO,IAAR,CAAc,GAAE,IAAIC,KAAJ,CAAUL,MAAV,EAAkBM,IAAlB,CAAuB,GAAvB,CAA4B,GAA5C;IACA,OAAOT,OAAP;EACD,CAVD,CAUE,OAAOU,aAAP,EAAsB;IACtB;IACA,OAAO,EAAP;EACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;EAC5B;EACA,MAAMC,GAAG,GAAGD,GAAG,CAACE,OAAhB,CAF4B,CAEH;EACzB;;EAEAF,GAAG,CAACG,SAAJ,GAAgB,IAAhB;EACAH,GAAG,CAACE,OAAJ,GAAc,CAAClB,EAAE,CAACoB,GAAJ,EAAS,GAAGlB,wBAAwB,CAACc,GAAD,CAApC,EAA2CC,GAAG,CAACI,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BL,GAAG,CAACX,KAAJ,CAAU,CAAV,CAAzE,EAAwF,YAAWU,GAAG,CAACO,QAAS,UAASP,GAAG,CAACQ,IAAK,YAAWR,GAAG,CAACT,MAAO,GAAxJ,EAA4JM,IAA5J,CAAiKb,EAAE,CAACoB,GAApK,CAAd;EACA,OAAOJ,GAAP;AACD;AACD;;;AAGAS,MAAM,CAACC,OAAP,GAAiBX,eAAjB"},"metadata":{},"sourceType":"script"}