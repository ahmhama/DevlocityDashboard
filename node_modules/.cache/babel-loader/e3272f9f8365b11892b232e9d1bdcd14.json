{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list\n *\n * @namespace list\n */\n\nvar list = {\n  split: function split(string, separators, last) {\n    var array = [];\n    var current = '';\n    var split = false;\n    var func = 0;\n    var quote = false;\n    var escape = false;\n\n    for (var i = 0; i < string.length; i++) {\n      var letter = string[i];\n\n      if (quote) {\n        if (escape) {\n          escape = false;\n        } else if (letter === '\\\\') {\n          escape = true;\n        } else if (letter === quote) {\n          quote = false;\n        }\n      } else if (letter === '\"' || letter === '\\'') {\n        quote = letter;\n      } else if (letter === '(') {\n        func += 1;\n      } else if (letter === ')') {\n        if (func > 0) func -= 1;\n      } else if (func === 0) {\n        if (separators.indexOf(letter) !== -1) split = true;\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim());\n        current = '';\n        split = false;\n      } else {\n        current += letter;\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim());\n    return array;\n  },\n\n  /**\n   * Safely splits space-separated values (such as those for `background`,\n   * `border-radius`, and other shorthand properties).\n   *\n   * @param {string} string Space-separated values.\n   *\n   * @return {string[]} Split values.\n   *\n   * @example\n   * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n   */\n  space: function space(string) {\n    var spaces = [' ', '\\n', '\\t'];\n    return list.split(string, spaces);\n  },\n\n  /**\n   * Safely splits comma-separated values (such as those for `transition-*`\n   * and `background` properties).\n   *\n   * @param {string} string Comma-separated values.\n   *\n   * @return {string[]} Split values.\n   *\n   * @example\n   * postcss.list.comma('black, linear-gradient(white, black)')\n   * //=> ['black', 'linear-gradient(white, black)']\n   */\n  comma: function comma(string) {\n    return list.split(string, [','], true);\n  }\n};\nvar _default = list;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["list.es6"],"names":["list","split","array","current","func","quote","escape","i","string","letter","separators","last","space","spaces","comma"],"mappings":";;;;AAAA;;;;;;;;;;AASA,IAAIA,IAAI,GAAG;EAETC,KAFS,EAAA,SAAA,KAAA,CAAA,MAAA,EAAA,UAAA,EAAA,IAAA,EAEwB;IAC/B,IAAIC,KAAK,GAAT,EAAA;IACA,IAAIC,OAAO,GAAX,EAAA;IACA,IAAIF,KAAK,GAAT,KAAA;IAEA,IAAIG,IAAI,GAAR,CAAA;IACA,IAAIC,KAAK,GAAT,KAAA;IACA,IAAIC,MAAM,GAAV,KAAA;;IAEA,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,MAAM,CAA1B,MAAA,EAAmCD,CAAnC,EAAA,EAAwC;MACtC,IAAIE,MAAM,GAAGD,MAAM,CAAnB,CAAmB,CAAnB;;MAEA,IAAA,KAAA,EAAW;QACT,IAAA,MAAA,EAAY;UACVF,MAAM,GAANA,KAAAA;QADF,CAAA,MAEO,IAAIG,MAAM,KAAV,IAAA,EAAqB;UAC1BH,MAAM,GAANA,IAAAA;QADK,CAAA,MAEA,IAAIG,MAAM,KAAV,KAAA,EAAsB;UAC3BJ,KAAK,GAALA,KAAAA;QACD;MAPH,CAAA,MAQO,IAAII,MAAM,KAANA,GAAAA,IAAkBA,MAAM,KAA5B,IAAA,EAAuC;QAC5CJ,KAAK,GAALA,MAAAA;MADK,CAAA,MAEA,IAAII,MAAM,KAAV,GAAA,EAAoB;QACzBL,IAAI,IAAJA,CAAAA;MADK,CAAA,MAEA,IAAIK,MAAM,KAAV,GAAA,EAAoB;QACzB,IAAIL,IAAI,GAAR,CAAA,EAAcA,IAAI,IAAJA,CAAAA;MADT,CAAA,MAEA,IAAIA,IAAI,KAAR,CAAA,EAAgB;QACrB,IAAIM,UAAU,CAAVA,OAAAA,CAAAA,MAAAA,MAA+B,CAAnC,CAAA,EAAuCT,KAAK,GAALA,IAAAA;MACxC;;MAED,IAAA,KAAA,EAAW;QACT,IAAIE,OAAO,KAAX,EAAA,EAAoBD,KAAK,CAALA,IAAAA,CAAWC,OAAO,CAAlBD,IAAWC,EAAXD;QACpBC,OAAO,GAAPA,EAAAA;QACAF,KAAK,GAALA,KAAAA;MAHF,CAAA,MAIO;QACLE,OAAO,IAAPA,MAAAA;MACD;IACF;;IAED,IAAIQ,IAAI,IAAIR,OAAO,KAAnB,EAAA,EAA4BD,KAAK,CAALA,IAAAA,CAAWC,OAAO,CAAlBD,IAAWC,EAAXD;IAC5B,OAAA,KAAA;EA1CO,CAAA;;EA6CT;;;;;;;;;;;EAWAU,KAxDS,EAAA,SAAA,KAAA,CAAA,MAAA,EAwDM;IACb,IAAIC,MAAM,GAAG,CAAA,GAAA,EAAA,IAAA,EAAb,IAAa,CAAb;IACA,OAAOb,IAAI,CAAJA,KAAAA,CAAAA,MAAAA,EAAP,MAAOA,CAAP;EA1DO,CAAA;;EA6DT;;;;;;;;;;;;EAYAc,KAzES,EAAA,SAAA,KAAA,CAAA,MAAA,EAyEM;IACb,OAAOd,IAAI,CAAJA,KAAAA,CAAAA,MAAAA,EAAmB,CAAnBA,GAAmB,CAAnBA,EAAP,IAAOA,CAAP;EACD;AA3EQ,CAAX;eA+EeA,I","sourcesContent":["/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list\n *\n * @namespace list\n */\nlet list = {\n\n  split (string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let quote = false\n    let escape = false\n\n    for (let i = 0; i < string.length; i++) {\n      let letter = string[i]\n\n      if (quote) {\n        if (escape) {\n          escape = false\n        } else if (letter === '\\\\') {\n          escape = true\n        } else if (letter === quote) {\n          quote = false\n        }\n      } else if (letter === '\"' || letter === '\\'') {\n        quote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.indexOf(letter) !== -1) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  /**\n   * Safely splits space-separated values (such as those for `background`,\n   * `border-radius`, and other shorthand properties).\n   *\n   * @param {string} string Space-separated values.\n   *\n   * @return {string[]} Split values.\n   *\n   * @example\n   * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n   */\n  space (string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  /**\n   * Safely splits comma-separated values (such as those for `transition-*`\n   * and `background` properties).\n   *\n   * @param {string} string Comma-separated values.\n   *\n   * @return {string[]} Split values.\n   *\n   * @example\n   * postcss.list.comma('black, linear-gradient(white, black)')\n   * //=> ['black', 'linear-gradient(white, black)']\n   */\n  comma (string) {\n    return list.split(string, [','], true)\n  }\n\n}\n\nexport default list\n"]},"metadata":{},"sourceType":"script"}