{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport actions from './actions';\nimport initialState from '../../demoData/chatData.json';\nconst {\n  singleChatBegin,\n  singleChatSuccess,\n  singleChatErr,\n  singleGroupChatBegin,\n  singleGroupChatSuccess,\n  singleGroupChatErr,\n  updateGroupChatBegin,\n  updateGroupChatSuccess,\n  updateGroupChatErr,\n  updatePrivetChatBegin,\n  updatePrivetChatSuccess,\n  updatePrivetChatErr\n} = actions;\n\nconst filterSinglePage = paramsId => {\n  return async dispatch => {\n    try {\n      dispatch(singleChatBegin());\n      const data = initialState[0].privetChat.filter(user => {\n        return user.email === paramsId;\n      });\n      dispatch(singleChatSuccess(data));\n    } catch (err) {\n      dispatch(singleChatErr(err));\n    }\n  };\n};\n\nconst updatePrivetChat = (paramsId, pushItem) => {\n  return async dispatch => {\n    try {\n      dispatch(updatePrivetChatBegin());\n      const data = initialState[0].privetChat.map(item => {\n        const user = item;\n\n        if (user.email === paramsId) {\n          user.time = pushItem.time;\n          user.content = [...user.content, pushItem];\n        }\n\n        return user;\n      });\n      dispatch(updatePrivetChatSuccess(data));\n    } catch (err) {\n      dispatch(updatePrivetChatErr(err));\n    }\n  };\n};\n\nconst filterSinglepageGroup = paramsId => {\n  return async dispatch => {\n    try {\n      dispatch(singleGroupChatBegin());\n      const data = initialState[0].groupChat.filter(user => {\n        return user.id === paramsId;\n      });\n      dispatch(singleGroupChatSuccess(data));\n    } catch (err) {\n      dispatch(singleGroupChatErr(err));\n    }\n  };\n};\n\nconst updateGroupChat = (paramsId, pushItem) => {\n  return async dispatch => {\n    try {\n      dispatch(updateGroupChatBegin());\n      const data = initialState[0].groupChat.map(item => {\n        const user = item;\n\n        if (user.id === paramsId) {\n          user.time = pushItem.time;\n          user.content = [...user.content, pushItem];\n        }\n\n        return user;\n      });\n      dispatch(updateGroupChatSuccess(data));\n    } catch (err) {\n      dispatch(updateGroupChatErr(err));\n    }\n  };\n};\n\nexport { filterSinglePage, filterSinglepageGroup, updateGroupChat, updatePrivetChat };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(singleChatBegin, \"singleChatBegin\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(singleChatSuccess, \"singleChatSuccess\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(singleChatErr, \"singleChatErr\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(singleGroupChatBegin, \"singleGroupChatBegin\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(singleGroupChatSuccess, \"singleGroupChatSuccess\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(singleGroupChatErr, \"singleGroupChatErr\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(updateGroupChatBegin, \"updateGroupChatBegin\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(updateGroupChatSuccess, \"updateGroupChatSuccess\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(updateGroupChatErr, \"updateGroupChatErr\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(updatePrivetChatBegin, \"updatePrivetChatBegin\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(updatePrivetChatSuccess, \"updatePrivetChatSuccess\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(updatePrivetChatErr, \"updatePrivetChatErr\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(filterSinglePage, \"filterSinglePage\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(updatePrivetChat, \"updatePrivetChat\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(filterSinglepageGroup, \"filterSinglepageGroup\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n  reactHotLoader.register(updateGroupChat, \"updateGroupChat\", \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder (2)\\\\strikingDash\\\\src\\\\redux\\\\chat\\\\actionCreator.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"names":["actions","initialState","singleChatBegin","singleChatSuccess","singleChatErr","singleGroupChatBegin","singleGroupChatSuccess","singleGroupChatErr","updateGroupChatBegin","updateGroupChatSuccess","updateGroupChatErr","updatePrivetChatBegin","updatePrivetChatSuccess","updatePrivetChatErr","filterSinglePage","paramsId","dispatch","data","privetChat","filter","user","email","err","updatePrivetChat","pushItem","map","item","time","content","filterSinglepageGroup","groupChat","id","updateGroupChat"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/src/redux/chat/actionCreator.js"],"sourcesContent":["import actions from './actions';\r\nimport initialState from '../../demoData/chatData.json';\r\n\r\nconst {\r\n  singleChatBegin,\r\n  singleChatSuccess,\r\n  singleChatErr,\r\n\r\n  singleGroupChatBegin,\r\n  singleGroupChatSuccess,\r\n  singleGroupChatErr,\r\n\r\n  updateGroupChatBegin,\r\n  updateGroupChatSuccess,\r\n  updateGroupChatErr,\r\n\r\n  updatePrivetChatBegin,\r\n  updatePrivetChatSuccess,\r\n  updatePrivetChatErr,\r\n} = actions;\r\n\r\nconst filterSinglePage = paramsId => {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(singleChatBegin());\r\n      const data = initialState[0].privetChat.filter(user => {\r\n        return user.email === paramsId;\r\n      });\r\n      dispatch(singleChatSuccess(data));\r\n    } catch (err) {\r\n      dispatch(singleChatErr(err));\r\n    }\r\n  };\r\n};\r\n\r\nconst updatePrivetChat = (paramsId, pushItem) => {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(updatePrivetChatBegin());\r\n      const data = initialState[0].privetChat.map(item => {\r\n        const user = item;\r\n        if (user.email === paramsId) {\r\n          user.time = pushItem.time;\r\n          user.content = [...user.content, pushItem];\r\n        }\r\n        return user;\r\n      });\r\n      dispatch(updatePrivetChatSuccess(data));\r\n    } catch (err) {\r\n      dispatch(updatePrivetChatErr(err));\r\n    }\r\n  };\r\n};\r\n\r\nconst filterSinglepageGroup = paramsId => {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(singleGroupChatBegin());\r\n      const data = initialState[0].groupChat.filter(user => {\r\n        return user.id === paramsId;\r\n      });\r\n      dispatch(singleGroupChatSuccess(data));\r\n    } catch (err) {\r\n      dispatch(singleGroupChatErr(err));\r\n    }\r\n  };\r\n};\r\n\r\nconst updateGroupChat = (paramsId, pushItem) => {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(updateGroupChatBegin());\r\n      const data = initialState[0].groupChat.map(item => {\r\n        const user = item;\r\n        if (user.id === paramsId) {\r\n          user.time = pushItem.time;\r\n          user.content = [...user.content, pushItem];\r\n        }\r\n        return user;\r\n      });\r\n      dispatch(updateGroupChatSuccess(data));\r\n    } catch (err) {\r\n      dispatch(updateGroupChatErr(err));\r\n    }\r\n  };\r\n};\r\n\r\nexport { filterSinglePage, filterSinglepageGroup, updateGroupChat, updatePrivetChat };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}