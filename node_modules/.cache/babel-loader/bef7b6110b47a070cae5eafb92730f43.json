{"ast":null,"code":"'use strict';\n\nconst stream = require('stream');\n\nconst check = require('check-types');\n\nconst parse = require('./parse');\n\nmodule.exports = unpipe;\n/**\n * Public function `unpipe`.\n *\n * Returns a writeable stream that can be passed to stream.pipe, then parses JSON\n * data read from the stream. If there are no errors, the callback is invoked with\n * the result as the second argument. If errors occur, the first error is passed to\n * the callback as the first argument.\n *\n * @param callback:   Function that will be called after parsing is complete.\n *\n * @option reviver:   Transformation function, invoked depth-first.\n *\n * @option discard:   The number of characters to process before discarding them\n *                    to save memory. The default value is `1048576`.\n *\n * @option yieldRate: The number of data items to process per timeslice,\n *                    default is 16384.\n **/\n\nfunction unpipe(callback, options) {\n  check.assert.function(callback, 'Invalid callback argument');\n  const jsonstream = new stream.PassThrough();\n  parse(jsonstream, Object.assign({}, options, {\n    ndjson: false\n  })).then(data => callback(null, data)).catch(error => callback(error));\n  return jsonstream;\n}","map":{"version":3,"names":["stream","require","check","parse","module","exports","unpipe","callback","options","assert","function","jsonstream","PassThrough","Object","assign","ndjson","then","data","catch","error"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/bfj/src/unpipe.js"],"sourcesContent":["'use strict'\n\nconst stream = require('stream')\nconst check = require('check-types')\nconst parse = require('./parse')\n\nmodule.exports = unpipe\n\n/**\n * Public function `unpipe`.\n *\n * Returns a writeable stream that can be passed to stream.pipe, then parses JSON\n * data read from the stream. If there are no errors, the callback is invoked with\n * the result as the second argument. If errors occur, the first error is passed to\n * the callback as the first argument.\n *\n * @param callback:   Function that will be called after parsing is complete.\n *\n * @option reviver:   Transformation function, invoked depth-first.\n *\n * @option discard:   The number of characters to process before discarding them\n *                    to save memory. The default value is `1048576`.\n *\n * @option yieldRate: The number of data items to process per timeslice,\n *                    default is 16384.\n **/\nfunction unpipe (callback, options) {\n  check.assert.function(callback, 'Invalid callback argument')\n\n  const jsonstream = new stream.PassThrough()\n\n  parse(jsonstream, Object.assign({}, options, { ndjson: false }))\n    .then(data => callback(null, data))\n    .catch(error => callback(error))\n\n  return jsonstream\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAArB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,MAAT,CAAiBC,QAAjB,EAA2BC,OAA3B,EAAoC;EAClCN,KAAK,CAACO,MAAN,CAAaC,QAAb,CAAsBH,QAAtB,EAAgC,2BAAhC;EAEA,MAAMI,UAAU,GAAG,IAAIX,MAAM,CAACY,WAAX,EAAnB;EAEAT,KAAK,CAACQ,UAAD,EAAaE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,OAAlB,EAA2B;IAAEO,MAAM,EAAE;EAAV,CAA3B,CAAb,CAAL,CACGC,IADH,CACQC,IAAI,IAAIV,QAAQ,CAAC,IAAD,EAAOU,IAAP,CADxB,EAEGC,KAFH,CAESC,KAAK,IAAIZ,QAAQ,CAACY,KAAD,CAF1B;EAIA,OAAOR,UAAP;AACD"},"metadata":{},"sourceType":"script"}