{"ast":null,"code":"'use strict';\n\nconst promise = require('./promise');\n\nconst streamify = require('./streamify');\n\nmodule.exports = stringify;\n/**\n * Public function `stringify`.\n *\n * Returns a promise and asynchronously serialises a data structure to a\n * JSON string. Sanely handles promises, buffers, maps and other iterables.\n *\n * @param data:          The data to transform\n *\n * @option space:        Indentation string, or the number of spaces\n *                       to indent each nested level by.\n *\n * @option promises:     'resolve' or 'ignore', default is 'resolve'.\n *\n * @option buffers:      'toString' or 'ignore', default is 'toString'.\n *\n * @option maps:         'object' or 'ignore', default is 'object'.\n *\n * @option iterables:    'array' or 'ignore', default is 'array'.\n *\n * @option circular:     'error' or 'ignore', default is 'error'.\n *\n * @option yieldRate:     The number of data items to process per timeslice,\n *                        default is 16384.\n *\n * @option bufferLength:  The length of the buffer, default is 1024.\n *\n * @option highWaterMark: If set, will be passed to the readable stream constructor\n *                        as the value for the highWaterMark option.\n *\n * @option Promise:       The promise constructor to use, defaults to bluebird.\n **/\n\nfunction stringify(data, options) {\n  const json = [];\n  const Promise = promise(options);\n  const stream = streamify(data, options);\n  let resolve, reject;\n  stream.on('data', read);\n  stream.on('end', end);\n  stream.on('error', error);\n  stream.on('dataError', error);\n  return new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n\n  function read(chunk) {\n    json.push(chunk);\n  }\n\n  function end() {\n    resolve(json.join(''));\n  }\n\n  function error(e) {\n    reject(e);\n  }\n}","map":{"version":3,"names":["promise","require","streamify","module","exports","stringify","data","options","json","Promise","stream","resolve","reject","on","read","end","error","res","rej","chunk","push","join","e"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/bfj/src/stringify.js"],"sourcesContent":["'use strict'\n\nconst promise = require('./promise')\nconst streamify = require('./streamify')\n\nmodule.exports = stringify\n\n/**\n * Public function `stringify`.\n *\n * Returns a promise and asynchronously serialises a data structure to a\n * JSON string. Sanely handles promises, buffers, maps and other iterables.\n *\n * @param data:          The data to transform\n *\n * @option space:        Indentation string, or the number of spaces\n *                       to indent each nested level by.\n *\n * @option promises:     'resolve' or 'ignore', default is 'resolve'.\n *\n * @option buffers:      'toString' or 'ignore', default is 'toString'.\n *\n * @option maps:         'object' or 'ignore', default is 'object'.\n *\n * @option iterables:    'array' or 'ignore', default is 'array'.\n *\n * @option circular:     'error' or 'ignore', default is 'error'.\n *\n * @option yieldRate:     The number of data items to process per timeslice,\n *                        default is 16384.\n *\n * @option bufferLength:  The length of the buffer, default is 1024.\n *\n * @option highWaterMark: If set, will be passed to the readable stream constructor\n *                        as the value for the highWaterMark option.\n *\n * @option Promise:       The promise constructor to use, defaults to bluebird.\n **/\nfunction stringify (data, options) {\n  const json = []\n  const Promise = promise(options)\n  const stream = streamify(data, options)\n\n  let resolve, reject\n\n  stream.on('data', read)\n  stream.on('end', end)\n  stream.on('error', error)\n  stream.on('dataError', error)\n\n  return new Promise((res, rej) => {\n    resolve = res\n    reject = rej\n  })\n\n  function read (chunk) {\n    json.push(chunk)\n  }\n\n  function end () {\n    resolve(json.join(''))\n  }\n\n  function error (e) {\n    reject(e)\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,SAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;EACjC,MAAMC,IAAI,GAAG,EAAb;EACA,MAAMC,OAAO,GAAGT,OAAO,CAACO,OAAD,CAAvB;EACA,MAAMG,MAAM,GAAGR,SAAS,CAACI,IAAD,EAAOC,OAAP,CAAxB;EAEA,IAAII,OAAJ,EAAaC,MAAb;EAEAF,MAAM,CAACG,EAAP,CAAU,MAAV,EAAkBC,IAAlB;EACAJ,MAAM,CAACG,EAAP,CAAU,KAAV,EAAiBE,GAAjB;EACAL,MAAM,CAACG,EAAP,CAAU,OAAV,EAAmBG,KAAnB;EACAN,MAAM,CAACG,EAAP,CAAU,WAAV,EAAuBG,KAAvB;EAEA,OAAO,IAAIP,OAAJ,CAAY,CAACQ,GAAD,EAAMC,GAAN,KAAc;IAC/BP,OAAO,GAAGM,GAAV;IACAL,MAAM,GAAGM,GAAT;EACD,CAHM,CAAP;;EAKA,SAASJ,IAAT,CAAeK,KAAf,EAAsB;IACpBX,IAAI,CAACY,IAAL,CAAUD,KAAV;EACD;;EAED,SAASJ,GAAT,GAAgB;IACdJ,OAAO,CAACH,IAAI,CAACa,IAAL,CAAU,EAAV,CAAD,CAAP;EACD;;EAED,SAASL,KAAT,CAAgBM,CAAhB,EAAmB;IACjBV,MAAM,CAACU,CAAD,CAAN;EACD;AACF"},"metadata":{},"sourceType":"script"}