{"ast":null,"code":"import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}","map":{"version":3,"sources":["../source/isPossibleNumber_.js"],"names":["options","metadata","input","isPossibleNumber","checkNumberLength"],"mappings":"AAAA,OAAA,QAAA,MAAA,eAAA;AACA,OAAA,iBAAA,MAAA,gCAAA;AAEA,eAAe,SAAA,qBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,QAAA,EAAyD;EACvE;EACA,IAAIA,OAAO,KAAX,SAAA,EAA2B;IAC1BA,OAAO,GAAPA,EAAAA;EACA;;EAEDC,QAAQ,GAAG,IAAA,QAAA,CAAXA,QAAW,CAAXA;;EAEA,IAAID,OAAO,CAAX,EAAA,EAAgB;IACf,IAAI,CAACE,KAAK,CAAV,kBAAA,EAA+B;MAC9B,MAAM,IAAA,KAAA,CAAN,oCAAM,CAAN;IACA;;IACDD,QAAQ,CAARA,mBAAAA,CAA6BC,KAAK,CAAlCD,kBAAAA;EAJD,CAAA,MAKO;IACN,IAAI,CAACC,KAAK,CAAV,KAAA,EAAkB;MACjB,OAAA,KAAA;IACA;;IACD,IAAIA,KAAK,CAAT,OAAA,EAAmB;MAClB,IAAI,CAACD,QAAQ,CAARA,UAAAA,CAAoBC,KAAK,CAA9B,OAAKD,CAAL,EAAyC;QACxC,MAAM,IAAA,KAAA,CAAA,oBAAA,MAAA,CAA8BC,KAAK,CAAzC,OAAM,CAAA,CAAN;MACA;;MACDD,QAAQ,CAARA,OAAAA,CAAiBC,KAAK,CAAtBD,OAAAA;IAJD,CAAA,MAKO;MACN,IAAI,CAACC,KAAK,CAAV,kBAAA,EAA+B;QAC9B,MAAM,IAAA,KAAA,CAAN,oCAAM,CAAN;MACA;;MACDD,QAAQ,CAARA,mBAAAA,CAA6BC,KAAK,CAAlCD,kBAAAA;IACA;EA3BqE,CAAA,CA8BvE;;;EACA,IAAIA,QAAQ,CAAZ,eAAIA,EAAJ,EAAgC;IAC/B,OAAOE,gBAAgB,CAACD,KAAK,CAALA,KAAAA,IAAeA,KAAK,CAArB,cAAA,EAAvB,QAAuB,CAAvB;EADD,CAAA,MAEO;IACN;IACA;IACA;IACA;IACA;IACA;IACA,IAAIA,KAAK,CAALA,kBAAAA,IAA4BD,QAAQ,CAARA,0BAAAA,CAAoCC,KAAK,CAAzE,kBAAgCD,CAAhC,EAA+F;MAC9F;MACA;MACA,OAAA,IAAA;IAHD,CAAA,MAIO;MACN,MAAM,IAAA,KAAA,CAAN,gGAAM,CAAN;IACA;EACD;AACD;AAED,OAAO,SAAA,gBAAA,CAAA,cAAA,EAAA,QAAA,EAAoD;EAAE;EAC5D,QAAQG,iBAAiB,CAAA,cAAA,EAAzB,QAAyB,CAAzB;IACC,KAAA,aAAA;MACC,OAAA,IAAA;IACD;IACA;IACA;IACA;;IACA;MACC,OAAA,KAAA;EARF;AAUA","sourcesContent":["import Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\nexport default function isPossiblePhoneNumber(input, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\t// Old metadata (< 1.0.18) had no \"possible length\" data.\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, metadata) { //, isInternational) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}