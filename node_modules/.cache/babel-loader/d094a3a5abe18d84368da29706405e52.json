{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst promise = require('./promise');\n\nconst streamify = require('./streamify');\n\nmodule.exports = write;\n/**\n * Public function `write`.\n *\n * Returns a promise and asynchronously serialises a data structure to a\n * JSON file on disk. Sanely handles promises, buffers, maps and other\n * iterables.\n *\n * @param path:           Path to the JSON file.\n *\n * @param data:           The data to transform.\n *\n * @option space:         Indentation string, or the number of spaces\n *                        to indent each nested level by.\n *\n * @option promises:      'resolve' or 'ignore', default is 'resolve'.\n *\n * @option buffers:       'toString' or 'ignore', default is 'toString'.\n *\n * @option maps:          'object' or 'ignore', default is 'object'.\n *\n * @option iterables:     'array' or 'ignore', default is 'array'.\n *\n * @option circular:      'error' or 'ignore', default is 'error'.\n *\n * @option yieldRate:     The number of data items to process per timeslice,\n *                        default is 16384.\n *\n * @option bufferLength:  The length of the buffer, default is 1024.\n *\n * @option highWaterMark: If set, will be passed to the readable stream constructor\n *                        as the value for the highWaterMark option.\n *\n * @option Promise:       The promise constructor to use, defaults to bluebird.\n **/\n\nfunction write(path, data, options) {\n  const Promise = promise(options);\n  return new Promise((resolve, reject) => {\n    streamify(data, options).pipe(fs.createWriteStream(path, options)).on('finish', () => {\n      resolve();\n    }).on('error', reject).on('dataError', reject);\n  });\n}","map":{"version":3,"names":["fs","require","promise","streamify","module","exports","write","path","data","options","Promise","resolve","reject","pipe","createWriteStream","on"],"sources":["C:/Users/Lenovo/Desktop/New folder (2)/strikingDash/node_modules/bfj/src/write.js"],"sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst promise = require('./promise')\nconst streamify = require('./streamify')\n\nmodule.exports = write\n\n/**\n * Public function `write`.\n *\n * Returns a promise and asynchronously serialises a data structure to a\n * JSON file on disk. Sanely handles promises, buffers, maps and other\n * iterables.\n *\n * @param path:           Path to the JSON file.\n *\n * @param data:           The data to transform.\n *\n * @option space:         Indentation string, or the number of spaces\n *                        to indent each nested level by.\n *\n * @option promises:      'resolve' or 'ignore', default is 'resolve'.\n *\n * @option buffers:       'toString' or 'ignore', default is 'toString'.\n *\n * @option maps:          'object' or 'ignore', default is 'object'.\n *\n * @option iterables:     'array' or 'ignore', default is 'array'.\n *\n * @option circular:      'error' or 'ignore', default is 'error'.\n *\n * @option yieldRate:     The number of data items to process per timeslice,\n *                        default is 16384.\n *\n * @option bufferLength:  The length of the buffer, default is 1024.\n *\n * @option highWaterMark: If set, will be passed to the readable stream constructor\n *                        as the value for the highWaterMark option.\n *\n * @option Promise:       The promise constructor to use, defaults to bluebird.\n **/\nfunction write (path, data, options) {\n  const Promise = promise(options)\n\n  return new Promise((resolve, reject) => {\n    streamify(data, options)\n      .pipe(fs.createWriteStream(path, options))\n      .on('finish', () => {\n        resolve()\n      })\n      .on('error', reject)\n      .on('dataError', reject)\n  })\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAzB;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,KAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqC;EACnC,MAAMC,OAAO,GAAGR,OAAO,CAACO,OAAD,CAAvB;EAEA,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCT,SAAS,CAACK,IAAD,EAAOC,OAAP,CAAT,CACGI,IADH,CACQb,EAAE,CAACc,iBAAH,CAAqBP,IAArB,EAA2BE,OAA3B,CADR,EAEGM,EAFH,CAEM,QAFN,EAEgB,MAAM;MAClBJ,OAAO;IACR,CAJH,EAKGI,EALH,CAKM,OALN,EAKeH,MALf,EAMGG,EANH,CAMM,WANN,EAMmBH,MANnB;EAOD,CARM,CAAP;AASD"},"metadata":{},"sourceType":"script"}